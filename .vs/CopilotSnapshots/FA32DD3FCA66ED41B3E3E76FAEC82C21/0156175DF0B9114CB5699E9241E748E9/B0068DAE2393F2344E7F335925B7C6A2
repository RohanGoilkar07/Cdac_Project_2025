using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using HousingHubBackend.Repositories;
using HousingHubBackend.Dtos.Flat;
using HousingHubBackend.Models;
using AutoMapper;
using FluentValidation;
using HousingHubBackend.Services.Interfaces;
using System.Threading.Tasks;

namespace HousingHubBackend.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class FlatsController : ControllerBase
    {
        private readonly IFlatRepository _flatRepository;
        private readonly IMapper _mapper;
        private readonly IValidator<FlatDto> _validator;
        private readonly INotificationService _notificationService;

        public FlatsController(IFlatRepository flatRepository, IMapper mapper, IValidator<FlatDto> validator, INotificationService notificationService)
        {
            _flatRepository = flatRepository;
            _mapper = mapper;
            _validator = validator;
            _notificationService = notificationService;
        }

        [HttpGet]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public async Task<IActionResult> GetAll()
        {
            var flats = await _flatRepository.GetAllAsync();
            var dtos = _mapper.Map<IEnumerable<FlatDto>>(flats);
            return Ok(dtos);
        }

        [HttpGet("{id}")]
        [Authorize(Roles = "super_admin,admin,security_staff,resident")]
        public async Task<IActionResult> Get(int id)
        {
            var flat = await _flatRepository.GetByIdAsync(id);
            if (flat == null) return NotFound();
            return Ok(_mapper.Map<FlatDto>(flat));
        }

        [HttpPost]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public async Task<IActionResult> Create([FromBody] FlatDto dto)
        {
            var validation = await _validator.ValidateAsync(dto);
            if (!validation.IsValid)
                return BadRequest(validation.Errors);
            var flat = _mapper.Map<Flat>(dto);
            await _flatRepository.AddAsync(flat);
            // Example: send notification email
            _notificationService.SendNotification("shoebaaasss@gmail.com", "Flat Created", $"Flat {flat.FlatNumber} created successfully.");
            return CreatedAtAction(nameof(Get), new { id = flat.FlatId }, _mapper.Map<FlatDto>(flat));
        }

        [HttpPut("{id}")]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public async Task<IActionResult> Update(int id, [FromBody] FlatDto dto)
        {
            var validation = await _validator.ValidateAsync(dto);
            if (!validation.IsValid)
                return BadRequest(validation.Errors);
            var flat = await _flatRepository.GetByIdAsync(id);
            if (flat == null) return NotFound();
            _mapper.Map(dto, flat);
            await _flatRepository.UpdateAsync(flat);
            return NoContent();
        }

        [HttpDelete("{id}")]
        [Authorize(Roles = "super_admin,admin")]
        public async Task<IActionResult> Delete(int id)
        {
            var deleted = await _flatRepository.DeleteAsync(id);
            if (!deleted) return NotFound();
            return NoContent();
        }
    }
}
