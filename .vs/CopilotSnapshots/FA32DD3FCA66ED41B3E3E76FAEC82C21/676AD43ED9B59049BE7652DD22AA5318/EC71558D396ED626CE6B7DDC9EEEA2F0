using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using HousingHubBackend.Data;
using HousingHubBackend.Models;
using HousingHubBackend.Dtos.Booking;
using AutoMapper;
using FluentValidation;
using System.Linq;
using System.Collections.Generic;

namespace HousingHubBackend.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class BookingsController : ControllerBase
    {
        private readonly HousingHubDBContext _context;
        private readonly IMapper _mapper;
        private readonly IValidator<CreateBookingDto> _createValidator;
        private readonly IValidator<UpdateBookingDto> _updateValidator;

        public BookingsController(HousingHubDBContext context, IMapper mapper, IValidator<CreateBookingDto> createValidator, IValidator<UpdateBookingDto> updateValidator)
        {
            _context = context;
            _mapper = mapper;
            _createValidator = createValidator;
            _updateValidator = updateValidator;
        }

        [HttpGet]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public IActionResult GetAll()
        {
            var bookings = _context.Bookings.ToList();
            var dtos = _mapper.Map<IEnumerable<BookingDto>>(bookings);
            return Ok(dtos);
        }

        [HttpGet("{id}")]
        [Authorize(Roles = "super_admin,admin,security_staff,resident")]
        public IActionResult Get(int id)
        {
            var booking = _context.Bookings.Find(id);
            if (booking == null) return NotFound();
            return Ok(_mapper.Map<BookingDto>(booking));
        }

        [HttpPost]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public IActionResult Create([FromBody] CreateBookingDto dto)
        {
            var validation = _createValidator.Validate(dto);
            if (!validation.IsValid)
                return BadRequest(validation.Errors);
            var booking = _mapper.Map<Booking>(dto);
            _context.Bookings.Add(booking);
            _context.SaveChanges();
            return CreatedAtAction(nameof(Get), new { id = booking.BookingId }, _mapper.Map<BookingDto>(booking));
        }

        [HttpPut("{id}")]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public IActionResult Update(int id, [FromBody] UpdateBookingDto dto)
        {
            var validation = _updateValidator.Validate(dto);
            if (!validation.IsValid)
                return BadRequest(validation.Errors);
            var existing = _context.Bookings.Find(id);
            if (existing == null) return NotFound();
            _mapper.Map(dto, existing);
            _context.SaveChanges();
            return NoContent();
        }

        [HttpDelete("{id}")]
        [Authorize(Roles = "super_admin,admin")]
        public IActionResult Delete(int id)
        {
            var booking = _context.Bookings.Find(id);
            if (booking == null) return NotFound();
            _context.Bookings.Remove(booking);
            _context.SaveChanges();
            return NoContent();
        }
    }
}
