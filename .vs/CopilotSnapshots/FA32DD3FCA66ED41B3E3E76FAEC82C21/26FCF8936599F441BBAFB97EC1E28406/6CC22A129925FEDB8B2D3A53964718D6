using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using HousingHubBackend.Data;
using HousingHubBackend.Models;
using HousingHubBackend.Dtos;
using AutoMapper;
using FluentValidation;
using System.Linq;
using System.Collections.Generic;
using Microsoft.AspNetCore.SignalR;
using HousingHubBackend.Hubs;

namespace HousingHubBackend.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class VisitorsController : ControllerBase
    {
        private readonly HousingHubDBContext _context;
        private readonly IMapper _mapper;
        private readonly IValidator<CreateVisitorDto> _createValidator;
        private readonly IValidator<UpdateVisitorDto> _updateValidator;
        private readonly IHubContext<NotificationHub> _hubContext;

        public VisitorsController(
            HousingHubDBContext context,
            IMapper mapper,
            IValidator<CreateVisitorDto> createValidator,
            IValidator<UpdateVisitorDto> updateValidator,
            IHubContext<NotificationHub> hubContext)
        {
            _context = context;
            _mapper = mapper;
            _createValidator = createValidator;
            _updateValidator = updateValidator;
            _hubContext = hubContext;
        }

        [HttpGet]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public IActionResult GetAll()
        {
            var visitors = _context.Visitors.ToList();
            var dtos = _mapper.Map<IEnumerable<VisitorDto>>(visitors);
            return Ok(dtos);
        }

        [HttpGet("{id}")]
        [Authorize(Roles = "super_admin,admin,security_staff,resident")]
        public IActionResult Get(int id)
        {
            var visitor = _context.Visitors.Find(id);
            if (visitor == null) return NotFound();
            return Ok(_mapper.Map<VisitorDto>(visitor));
        }

        [HttpPost]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public IActionResult Create([FromBody] CreateVisitorDto dto)
        {
            var visitor = _mapper.Map<Visitor>(dto);
            _context.Visitors.Add(visitor);
            _context.SaveChanges();
            // Notify resident (if FlatId is available)
            if (visitor.FlatId != null)
            {
                // You may want to map FlatId to a user or group
                _hubContext.Clients.Group($"flat_{visitor.FlatId}").SendAsync("ReceiveNotification", $"A new visitor has been added for your flat. Visitor: {visitor.Name}");
            }
            return CreatedAtAction(nameof(Get), new { id = visitor.VisitorId }, _mapper.Map<VisitorDto>(visitor));
        }

        [HttpPut("{id}")]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public IActionResult Update(int id, [FromBody] UpdateVisitorDto dto)
        {
            var existing = _context.Visitors.Find(id);
            if (existing == null) return NotFound();
            _mapper.Map(dto, existing);
            _context.SaveChanges();
            return NoContent();
        }

        [HttpDelete("{id}")]
        [Authorize(Roles = "super_admin,admin")]
        public IActionResult Delete(int id)
        {
            var visitor = _context.Visitors.Find(id);
            if (visitor == null) return NotFound();
            _context.Visitors.Remove(visitor);
            _context.SaveChanges();
            return NoContent();
        }
    }
}