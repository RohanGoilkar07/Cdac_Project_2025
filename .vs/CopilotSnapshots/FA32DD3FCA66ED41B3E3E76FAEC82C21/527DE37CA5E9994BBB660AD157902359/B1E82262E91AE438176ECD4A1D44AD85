using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using HousingHubBackend.Data;
using HousingHubBackend.Models;
using System.Linq;

namespace HousingHubBackend.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class SocietiesController : ControllerBase
    {
        private readonly HousingHubDBContext _context;
        public SocietiesController(HousingHubDBContext context)
        {
            _context = context;
        }

        [HttpGet]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public IActionResult GetAll()
        {
            return Ok(_context.Societies.ToList());
        }

        [HttpGet("{id}")]
        [Authorize(Roles = "super_admin,admin,security_staff,resident")]
        public IActionResult Get(int id)
        {
            var society = _context.Societies.Find(id);
            if (society == null) return NotFound();
            return Ok(society);
        }

        [HttpPost]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public IActionResult Create([FromBody] Society society)
        {
            _context.Societies.Add(society);
            _context.SaveChanges();
            return CreatedAtAction(nameof(Get), new { id = society.SocietyId }, society);
        }

        [HttpPut("{id}")]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public IActionResult Update(int id, [FromBody] Society society)
        {
            var existing = _context.Societies.Find(id);
            if (existing == null) return NotFound();
            existing.Name = society.Name;
            existing.Address = society.Address;
            existing.State = society.State;
            existing.Country = society.Country;
            existing.City = society.City;
            existing.Pincode = society.Pincode;
            existing.CreatedAt = society.CreatedAt;
            existing.IsVerified = society.IsVerified;
            _context.SaveChanges();
            return NoContent();
        }

        [HttpDelete("{id}")]
        [Authorize(Roles = "super_admin,admin")]
        public IActionResult Delete(int id)
        {
            var society = _context.Societies.Find(id);
            if (society == null) return NotFound();
            _context.Societies.Remove(society);
            _context.SaveChanges();
            return NoContent();
        }
    }
}
