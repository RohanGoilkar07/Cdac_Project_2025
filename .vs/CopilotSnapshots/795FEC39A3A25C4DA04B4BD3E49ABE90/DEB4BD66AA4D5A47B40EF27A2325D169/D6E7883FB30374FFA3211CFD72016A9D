import React, { useEffect, useState } from 'react';
import { API_BASE_URL } from '../../config';
import Button from '../UI/Button';
import Input from '../UI/Input';
import { useAuth } from '../../contexts/AuthContext';

const WingsList = () => {
  const { user } = useAuth();
  const [wings, setWings] = useState([]);
  const [society, setSociety] = useState(null);
  const [form, setForm] = useState({ name: '', totalFloors: '', flatsPerFloor: '' });
  const [editingId, setEditingId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const getAuthHeaders = () => {
    const token = localStorage.getItem('token');
    return {
      'Content-Type': 'application/json',
      ...(token ? { 'Authorization': `Bearer ${token}` } : {})
    };
  };

  // Fetch admin's society info
  const fetchSociety = async () => {
    if (!user?.societyId) return;
    try {
      const res = await fetch(`${API_BASE_URL}/societies/${user.societyId}`, {
        headers: getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to load society');
      const data = await res.json();
      setSociety(data);
    } catch {
      setSociety(null);
    }
  };

  // Fetch wings for admin's society only
  const fetchWings = async () => {
    setLoading(true);
    try {
      const res = await fetch(`${API_BASE_URL}/wings`, {
        headers: getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to load wings');
      const data = await res.json();
      // Filter wings by admin's societyId
      setWings(data.filter(w => w.societyId === user.societyId));
    } catch {
      setError('Failed to load wings');
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchSociety();
    fetchWings();
    // eslint-disable-next-line
  }, [user?.societyId]);

  const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async e => {
    e.preventDefault();
    setError('');
    setLoading(true);
    try {
      const payload = {
        name: form.name,
        totalFloors: form.totalFloors ? parseInt(form.totalFloors, 10) : null,
        flatsPerFloor: form.flatsPerFloor ? parseInt(form.flatsPerFloor, 10) : null,
        societyId: user.societyId
      };
      const res = await fetch(`${API_BASE_URL}/wings`, {
        method: 'POST',
        headers: getAuthHeaders(),
        body: JSON.stringify(payload)
      });
      if (!res.ok) throw new Error('Failed to save wing');
      setForm({ name: '', totalFloors: '', flatsPerFloor: '' });
      fetchWings();
    } catch {
      setError('Failed to save wing');
    }
    setLoading(false);
  };

  return (
    <div>
      <h2 className="text-lg font-semibold mb-4">Wings</h2>
      {society && (
        <div className="mb-4 p-3 bg-gray-50 rounded border text-gray-700">
          <span className="font-medium">Society:</span> {society.name}
        </div>
      )}
      <form onSubmit={handleSubmit} className="flex flex-wrap gap-2 mb-4 items-end">
        <Input name="name" value={form.name} onChange={handleChange} placeholder="Wing Name" required />
        <Input name="totalFloors" value={form.totalFloors} onChange={handleChange} placeholder="Total Floors" type="number" min="1" required />
        <Input name="flatsPerFloor" value={form.flatsPerFloor} onChange={handleChange} placeholder="Flats Per Floor" type="number" min="1" required />
        <Button type="submit" variant="primary" disabled={loading}>
          Add
        </Button>
      </form>
      {error && <div className="text-red-600 mb-2">{error}</div>}
      <div className="overflow-x-auto">
        <table className="min-w-full border text-sm">
          <thead>
            <tr className="bg-gray-100">
              <th className="px-4 py-2 border">Wing ID</th>
              <th className="px-4 py-2 border">Name</th>
              <th className="px-4 py-2 border">Total Floors</th>
              <th className="px-4 py-2 border">Flats Per Floor</th>
            </tr>
          </thead>
          <tbody>
            {wings.map(wing => (
              <tr key={wing.wingId}>
                <td className="border px-4 py-2">{wing.wingId}</td>
                <td className="border px-4 py-2">{wing.name}</td>
                <td className="border px-4 py-2">{wing.totalFloors}</td>
                <td className="border px-4 py-2">{wing.flatsPerFloor}</td>
              </tr>
            ))}
            {wings.length === 0 && (
              <tr><td colSpan={4} className="text-center py-4">No wings found.</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default WingsList;
