import React, { useEffect, useState } from 'react';
import { API_BASE_URL } from '../../config';
import Button from '../UI/Button';
import Input from '../UI/Input';

const WingsList = () => {
  const [wings, setWings] = useState([]);
  const [form, setForm] = useState({ name: '' });
  const [editingId, setEditingId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const getAuthHeaders = () => {
    const token = localStorage.getItem('token');
    return {
      'Content-Type': 'application/json',
      ...(token ? { 'Authorization': `Bearer ${token}` } : {})
    };
  };

  const fetchWings = async () => {
    setLoading(true);
    try {
      const res = await fetch(`${API_BASE_URL}/wings`, {
        headers: getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to load wings');
      const data = await res.json();
      setWings(data);
    } catch {
      setError('Failed to load wings');
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchWings();
  }, []);

  const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async e => {
    e.preventDefault();
    setError('');
    setLoading(true);
    try {
      const method = editingId ? 'PUT' : 'POST';
      const url = editingId ? `${API_BASE_URL}/wings/${editingId}` : `${API_BASE_URL}/wings`;
      const res = await fetch(url, {
        method,
        headers: getAuthHeaders(),
        body: JSON.stringify(form)
      });
      if (!res.ok) throw new Error('Failed to save wing');
      setForm({ name: '' });
      setEditingId(null);
      fetchWings();
    } catch {
      setError('Failed to save wing');
    }
    setLoading(false);
  };

  const handleEdit = wing => {
    setForm({ name: wing.name });
    setEditingId(wing.wingId);
  };

  const handleDelete = async id => {
    if (!window.confirm('Delete this wing?')) return;
    setLoading(true);
    try {
      await fetch(`${API_BASE_URL}/wings/${id}`, {
        method: 'DELETE',
        headers: getAuthHeaders()
      });
      fetchWings();
    } catch {
      setError('Failed to delete wing');
    }
    setLoading(false);
  };

  return (
    <div>
      <h2 className="text-lg font-semibold mb-4">Wings</h2>
      <form onSubmit={handleSubmit} className="flex gap-2 mb-4">
        <Input name="name" value={form.name} onChange={handleChange} placeholder="Wing Name" required />
        <Button type="submit" variant="primary" disabled={loading}>
          {editingId ? 'Update' : 'Add'}
        </Button>
        {editingId && (
          <Button type="button" variant="secondary" onClick={() => { setForm({ name: '' }); setEditingId(null); }}>
            Cancel
          </Button>
        )}
      </form>
      {error && <div className="text-red-600 mb-2">{error}</div>}
      <div className="overflow-x-auto">
        <table className="min-w-full border text-sm">
          <thead>
            <tr className="bg-gray-100">
              <th className="px-4 py-2 border">Wing ID</th>
              <th className="px-4 py-2 border">Name</th>
              <th className="px-4 py-2 border">Actions</th>
            </tr>
          </thead>
          <tbody>
            {wings.map(wing => (
              <tr key={wing.wingId}>
                <td className="border px-4 py-2">{wing.wingId}</td>
                <td className="border px-4 py-2">{wing.name}</td>
                <td className="border px-4 py-2 space-x-2">
                  <Button type="button" variant="secondary" onClick={() => handleEdit(wing)} size="sm">Edit</Button>
                  <Button type="button" variant="danger" onClick={() => handleDelete(wing.wingId)} size="sm">Delete</Button>
                </td>
              </tr>
            ))}
            {wings.length === 0 && (
              <tr><td colSpan={3} className="text-center py-4">No wings found.</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default WingsList;
