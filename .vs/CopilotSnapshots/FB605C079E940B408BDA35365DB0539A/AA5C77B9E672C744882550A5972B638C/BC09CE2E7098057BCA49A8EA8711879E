using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using HousingHubBackend.Data;
using HousingHubBackend.Models;
using HousingHubBackend.Dtos;
using AutoMapper;
using FluentValidation;
using System.Linq;
using System.Collections.Generic;

namespace HousingHubBackend.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class AmenitiesController : ControllerBase
    {
        private readonly HousingHubDBContext _context;
        private readonly IMapper _mapper;
        private readonly IValidator<CreateAmenityDto> _createValidator;
        private readonly IValidator<UpdateAmenityDto> _updateValidator;

        public AmenitiesController(
            HousingHubDBContext context,
            IMapper mapper,
            IValidator<CreateAmenityDto> createValidator,
            IValidator<UpdateAmenityDto> updateValidator)
        {
            _context = context;
            _mapper = mapper;
            _createValidator = createValidator;
            _updateValidator = updateValidator;
        }

        // Helper to get current user's societyId
        private int? GetCurrentUserSocietyId()
        {
            var userIdClaim = User.Claims.FirstOrDefault(c => c.Type == "userId")?.Value;
            if (int.TryParse(userIdClaim, out var userId))
            {
                var user = _context.UserAccounts.FirstOrDefault(u => u.UserId == userId);
                return user?.SocietyId;
            }
            return null;
        }

        [HttpGet]
        [Authorize(Roles = "super_admin,admin,security_staff,resident")]
        public IActionResult GetAll()
        {
            var societyId = GetCurrentUserSocietyId();
            if (societyId == null) return Forbid();
            var amenities = _context.Amenities.Where(a => a.SocietyId == societyId).ToList();
            var dtos = _mapper.Map<IEnumerable<AmenityDto>>(amenities);
            return Ok(dtos);
        }

        [HttpGet("{id}")]
        [Authorize(Roles = "super_admin,admin,security_staff,resident")]
        public IActionResult Get(int id)
        {
            var societyId = GetCurrentUserSocietyId();
            if (societyId == null) return Forbid();
            var amenity = _context.Amenities.Find(id);
            if (amenity == null || amenity.SocietyId != societyId) return NotFound();
            return Ok(_mapper.Map<AmenityDto>(amenity));
        }

        [HttpPost]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public IActionResult Create([FromBody] CreateAmenityDto dto)
        {
            var societyId = GetCurrentUserSocietyId();
            if (societyId == null) return Forbid();
            if (dto.SocietyId != societyId) return BadRequest("Invalid society for this user.");
            var amenity = _mapper.Map<Amenity>(dto);
            _context.Amenities.Add(amenity);
            _context.SaveChanges();
            return CreatedAtAction(nameof(Get), new { id = amenity.AmenityId }, _mapper.Map<AmenityDto>(amenity));
        }

        [HttpPut("{id}")]
        [Authorize(Roles = "super_admin,admin,security_staff")]
        public IActionResult Update(int id, [FromBody] UpdateAmenityDto dto)
        {
            var societyId = GetCurrentUserSocietyId();
            if (societyId == null) return Forbid();
            var existing = _context.Amenities.Find(id);
            if (existing == null || existing.SocietyId != societyId) return NotFound();
            if (dto.SocietyId != null && dto.SocietyId != societyId) return BadRequest("Invalid society for this user.");
            _mapper.Map(dto, existing);
            _context.SaveChanges();
            return NoContent();
        }

        [HttpDelete("{id}")]
        [Authorize(Roles = "super_admin,admin")]
        public IActionResult Delete(int id)
        {
            var societyId = GetCurrentUserSocietyId();
            if (societyId == null) return Forbid();
            var amenity = _context.Amenities.Find(id);
            if (amenity == null || amenity.SocietyId != societyId) return NotFound();
            _context.Amenities.Remove(amenity);
            _context.SaveChanges();
            return NoContent();
        }
    }
}