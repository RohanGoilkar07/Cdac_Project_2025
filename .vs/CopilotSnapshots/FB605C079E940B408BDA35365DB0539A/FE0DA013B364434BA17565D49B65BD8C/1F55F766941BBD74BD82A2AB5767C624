import React, { useEffect, useState } from 'react';
import { API_BASE_URL } from '../config';
import { useAuth } from '../contexts/AuthContext';
import Button from '../components/UI/Button';
import Input from '../components/UI/Input';
import Modal from '../components/UI/Modal';
import Table from '../components/UI/Table';

const emptyVisitor = {
  name: '',
  phone: '',
  flatId: '',
  purpose: '',
  vehicleNo: '',
  visitorType: 'guest'
};

const VisitorsEntryPage = () => {
  const { user } = useAuth();
  const [flats, setFlats] = useState([]);
  const [visitors, setVisitors] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [newVisitor, setNewVisitor] = useState(emptyVisitor);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const getAuthHeaders = () => ({
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${localStorage.getItem('token')}`
  });

  useEffect(() => {
    fetchFlats();
    fetchVisitors();
  }, []);

  const fetchFlats = async () => {
    try {
      const res = await fetch(`${API_BASE_URL}/flats`, { headers: getAuthHeaders() });
      if (!res.ok) throw new Error('Failed to load flats');
      setFlats(await res.json());
    } catch {
      setFlats([]);
    }
  };

  const fetchVisitors = async () => {
    try {
      const res = await fetch(`${API_BASE_URL}/visitors`, { headers: getAuthHeaders() });
      if (!res.ok) throw new Error('Failed to load visitors');
      setVisitors(await res.json());
    } catch {
      setVisitors([]);
    }
  };

  const handleVisitorEntry = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    try {
      const payload = {
        ...newVisitor,
        entryTime: new Date().toISOString(),
        recordedBy: user?.userId,
        flatId: newVisitor.flatId ? parseInt(newVisitor.flatId, 10) : null,
        visitorType: newVisitor.visitorType.charAt(0).toUpperCase() + newVisitor.visitorType.slice(1)
      };
      const res = await fetch(`${API_BASE_URL}/visitors`, {
        method: 'POST',
        headers: getAuthHeaders(),
        body: JSON.stringify(payload)
      });
      if (!res.ok) throw new Error('Failed to register visitor');
      setShowModal(false);
      setNewVisitor(emptyVisitor);
      fetchVisitors();
    } catch (err) {
      setError(err.message || 'Error registering visitor');
    }
    setLoading(false);
  };

  return (
    <div className="max-w-5xl mx-auto py-8 px-4">
      <h1 className="text-2xl font-bold mb-6">Visitor Entry</h1>
      <div className="mb-4 flex justify-end">
        <Button onClick={() => setShowModal(true)}>
          New Visitor Entry
        </Button>
      </div>
      <Modal isOpen={showModal} onClose={() => setShowModal(false)} title="New Visitor Entry" size="lg">
        <form onSubmit={handleVisitorEntry} className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <Input
              label="Visitor Name"
              value={newVisitor.name}
              onChange={e => setNewVisitor({ ...newVisitor, name: e.target.value })}
              placeholder="Enter visitor's full name"
              required
            />
            <Input
              label="Phone Number"
              value={newVisitor.phone}
              onChange={e => setNewVisitor({ ...newVisitor, phone: e.target.value })}
              placeholder="Enter phone number"
              required
            />
          </div>
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">Flat</label>
              <select
                value={newVisitor.flatId}
                onChange={e => setNewVisitor({ ...newVisitor, flatId: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              >
                <option value="">Select Flat</option>
                {flats.map(f => (
                  <option key={f.flatId} value={f.flatId}>{f.flatNumber}</option>
                ))}
              </select>
            </div>
            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">Visitor Type</label>
              <select
                value={newVisitor.visitorType}
                onChange={e => setNewVisitor({ ...newVisitor, visitorType: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              >
                <option value="guest">Guest</option>
                <option value="delivery">Delivery</option>
                <option value="maintenance">Maintenance</option>
                <option value="other">Other</option>
              </select>
            </div>
          </div>
          <Input
            label="Purpose of Visit"
            value={newVisitor.purpose}
            onChange={e => setNewVisitor({ ...newVisitor, purpose: e.target.value })}
            placeholder="Brief description of visit purpose"
            required
          />
          <Input
            label="Vehicle Number (Optional)"
            value={newVisitor.vehicleNo}
            onChange={e => setNewVisitor({ ...newVisitor, vehicleNo: e.target.value })}
            placeholder="e.g., MH01AB1234"
            required={false}
          />
          {error && <div className="text-red-600 text-sm">{error}</div>}
          <div className="flex justify-end space-x-3 pt-4">
            <Button variant="secondary" onClick={() => setShowModal(false)} type="button">
              Cancel
            </Button>
            <Button type="submit" variant="primary" disabled={loading}>
              Register Entry
            </Button>
          </div>
        </form>
      </Modal>
      <div className="mt-8">
        <h2 className="text-lg font-semibold mb-4">Current Visitors</h2>
        <Table headers={['Name', 'Flat', 'Purpose', 'Entry Time', 'Vehicle', 'Type']}>
          {visitors.filter(v => !v.exitTime).map(visitor => (
            <tr key={visitor.visitorId} className="hover:bg-gray-50">
              <td className="px-6 py-4 font-medium text-gray-900">{visitor.name}</td>
              <td className="px-6 py-4">{flats.find(f => f.flatId === visitor.flatId)?.flatNumber || '-'}</td>
              <td className="px-6 py-4">{visitor.purpose}</td>
              <td className="px-6 py-4">{visitor.entryTime ? new Date(visitor.entryTime).toLocaleString() : '-'}</td>
              <td className="px-6 py-4">{visitor.vehicleNo || '-'}</td>
              <td className="px-6 py-4">{visitor.visitorType}</td>
            </tr>
          ))}
        </Table>
      </div>
    </div>
  );
};

export default VisitorsEntryPage;
