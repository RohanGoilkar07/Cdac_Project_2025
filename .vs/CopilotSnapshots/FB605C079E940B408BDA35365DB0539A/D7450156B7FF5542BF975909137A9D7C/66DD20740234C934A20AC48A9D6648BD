import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Building2, User, Mail, Phone, Lock, Home } from 'lucide-react';
import Input from '../../components/UI/Input';
import Button from '../../components/UI/Button';
import { useAuth } from '../../contexts/AuthContext';
import { API_BASE_URL } from '../../config';

const RegisterPage = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    password: '',
    confirmPassword: '',
    flatId: '',
    societyId: ''
  });
  const [societies, setSocieties] = useState([]);
  const [flats, setFlats] = useState([]);
  const [error, setError] = useState('');
  const [phoneError, setPhoneError] = useState('');
  const [emailError, setEmailError] = useState('');
  const [passwordError, setPasswordError] = useState('');
  const [loading, setLoading] = useState(false);
  const { register } = useAuth();

  // Fetch societies on mount
  useEffect(() => {
    fetch(`${API_BASE_URL}/societies`)
      .then(res => res.json())
      .then(data => setSocieties(data))
      .catch(() => setSocieties([]));
  }, []);

  // Fetch flats when societyId changes
  useEffect(() => {
    if (!formData.societyId) {
      setFlats([]);
      setFormData(f => ({ ...f, flatId: '' }));
      return;
    }
    fetch(`${API_BASE_URL}/flats`)
      .then(res => res.json())
      .then(data => setFlats(data.filter(f => f.wing && f.wing.societyId === parseInt(formData.societyId))))
      .catch(() => setFlats([]));
  }, [formData.societyId]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);
    if (formData.password !== formData.confirmPassword) {
      setError('Passwords do not match');
      setLoading(false);
      return;
    }
    if (!formData.societyId || !formData.flatId) {
      setError('Society and Flat are required');
      setLoading(false);
      return;
    }
    if (!/^\d{10}$/.test(formData.phone)) {
      setError('Phone number must be exactly 10 digits');
      setLoading(false);
      return;
    }
    if (!formData.email.includes('@') || !formData.email.endsWith('.com')) {
      setError('Email must contain @ and end with .com');
      setLoading(false);
      return;
    }
    const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z\d]).+$/;
    if (!passwordPattern.test(formData.password)) {
      setError('Password must have 1 uppercase, 1 lowercase, 1 number, 1 special character');
      setLoading(false);
      return;
    }
    // Prepare userData as per backend DTO
    const userData = {
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
      password: formData.password,
      role: 'resident',
      societyId: parseInt(formData.societyId),
      flatId: parseInt(formData.flatId)
    };
    try {
      const success = await register(userData);
      if (success) {
        setError('');
        alert('Resident registered successfully!');
      } else {
        setError('Registration failed. Please try again.');
      }
    } catch (err) {
      setError(err.message || 'Registration failed. Please try again.');
    }
    setLoading(false);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === 'phone') {
      if (!/^\d{0,10}$/.test(value)) return;
      setPhoneError(value.length === 10 ? '' : 'Phone number must be exactly 10 digits');
    }
    if (name === 'email') {
      setEmailError(value.includes('@') && value.endsWith('.com') ? '' : 'Email must contain @ and end with .com');
    }
    if (name === 'password') {
      const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z\d]).+$/;
      setPasswordError(passwordPattern.test(value)
        ? ''
        : 'Password must have 1 uppercase, 1 lowercase, 1 number, 1 special character');
    }
    setFormData({
      ...formData,
      [name]: value
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center p-4">
      <div className="max-w-md w-full bg-white rounded-xl shadow-lg p-8">
        <div className="text-center mb-8">
          <div className="flex items-center justify-center mb-4">
            <Building2 className="h-12 w-12 text-green-600" />
          </div>
          <h2 className="text-3xl font-bold text-gray-900">Register Resident</h2>
          <p className="text-gray-600 mt-2">Join your society community</p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
              {error}
            </div>
          )}
          <div className="relative flex flex-col">
            <label htmlFor="register-name" className="font-semibold mb-1">Full Name</label>
            <User className="absolute left-3 top-10 h-4 w-4 text-gray-400" />
            <Input
              id="register-name"
              name="name"
              type="text"
              placeholder="Full Name"
              value={formData.name}
              onChange={handleChange}
              className="pl-10"
              required
            />
          </div>

          <div className="relative flex flex-col">
            <label htmlFor="register-email" className="font-semibold mb-1">Email Address</label>
            <Mail className="absolute left-3 top-10 h-4 w-4 text-gray-400" />
            <Input
              id="register-email"
              name="email"
              type="email"
              placeholder="Email Address"
              value={formData.email}
              onChange={handleChange}
              className="pl-10"
              required
            />
            {emailError && <span className="text-red-600 text-xs mt-1">{emailError}</span>}
          </div>

          <div className="relative flex flex-col">
            <label htmlFor="register-phone" className="font-semibold mb-1">Phone Number</label>
            <Phone className="absolute left-3 top-10 h-4 w-4 text-gray-400" />
            <Input
              id="register-phone"
              name="phone"
              type="tel"
              placeholder="Phone Number"
              value={formData.phone}
              onChange={handleChange}
              className="pl-10"
              required
              maxLength={10}
              pattern="\d{10}"
            />
            {phoneError && <span className="text-red-600 text-xs mt-1">{phoneError}</span>}
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="flex flex-col">
              <label htmlFor="register-societyId" className="font-semibold mb-1">Society Name</label>
              <select
                id="register-societyId"
                name="societyId"
                value={formData.societyId}
                onChange={handleChange}
                className="border rounded px-2 py-1"
                required
              >
                <option value="">Select Society</option>
                {societies.map(s => (
                  <option key={s.societyId} value={s.societyId}>{s.name}</option>
                ))}
              </select>
            </div>
            <div className="flex flex-col">
              <label htmlFor="register-flatId" className="font-semibold mb-1">Flat Number</label>
              <select
                id="register-flatId"
                name="flatId"
                value={formData.flatId}
                onChange={handleChange}
                className="border rounded px-2 py-1"
                required
                disabled={!formData.societyId}
              >
                <option value="">Select Flat</option>
                {flats.map(f => (
                  <option key={f.flatId} value={f.flatId}>{f.flatNumber}</option>
                ))}
              </select>
            </div>
          </div>

          <div className="relative flex flex-col">
            <label htmlFor="register-password" className="font-semibold mb-1">Password</label>
            <Lock className="absolute left-3 top-10 h-4 w-4 text-gray-400" />
            <Input
              id="register-password"
              name="password"
              type="password"
              placeholder="Password"
              value={formData.password}
              onChange={handleChange}
              className="pl-10"
              required
            />
            {passwordError && <span className="text-red-600 text-xs mt-1">{passwordError}</span>}
          </div>

          <div className="relative flex flex-col">
            <label htmlFor="register-confirmPassword" className="font-semibold mb-1">Confirm Password</label>
            <Lock className="absolute left-3 top-10 h-4 w-4 text-gray-400" />
            <Input
              id="register-confirmPassword"
              name="confirmPassword"
              type="password"
              placeholder="Confirm Password"
              value={formData.confirmPassword}
              onChange={handleChange}
              className="pl-10"
              required
            />
          </div>

          <Button type="submit" variant="success" className="w-full" disabled={loading}>
            {loading ? 'Registering...' : 'Register'}
          </Button>
        </form>

        <div className="mt-6 text-center">
          <p className="text-sm text-gray-600">
            Already have an account?{' '}
            <Link to="/login" className="text-green-600 hover:text-green-700 font-medium">
              Sign in here
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default RegisterPage;