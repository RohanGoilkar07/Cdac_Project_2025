using AutoMapper;
using FluentValidation;
using HousingHubBackend.Data;
using HousingHubBackend.Dtos;
using HousingHubBackend.Hubs;
using HousingHubBackend.Models;
using HousingHubBackend.Services.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.SignalR;
using System.Collections.Generic;
using System.Linq;

namespace HousingHubBackend.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class BookingsController : ControllerBase
    {
        private readonly HousingHubDBContext _context;
        private readonly IMapper _mapper;
        private readonly IValidator<CreateBookingDto> _createValidator;
        private readonly IValidator<UpdateBookingDto> _updateValidator;
        private readonly IHubContext<NotificationHub> _hubContext;
        private readonly INotificationService _notificationService;

        public BookingsController(
            HousingHubDBContext context,
            IMapper mapper,
            IValidator<CreateBookingDto> createValidator,
            IValidator<UpdateBookingDto> updateValidator,
            IHubContext<NotificationHub> hubContext,
            INotificationService notificationService)
        {
            _context = context;
            _mapper = mapper;
            _createValidator = createValidator;
            _updateValidator = updateValidator;
            _hubContext = hubContext;
            _notificationService = notificationService;
        }

        [HttpGet]
        [Authorize(Roles = "super_admin,admin,security_staff,resident")]
        public IActionResult GetAll()
        {
            var bookings = _context.Bookings.ToList();
            var dtos = _mapper.Map<IEnumerable<BookingDto>>(bookings);
            // No filter on paid/unpaid, so both admin and resident can see all bookings with their paid status
            return Ok(dtos);
        }

        [HttpGet("{id}")]
        [Authorize(Roles = "super_admin,admin,security_staff,resident")]
        public IActionResult Get(int id)
        {
            var booking = _context.Bookings.Find(id);
            if (booking == null) return NotFound();
            return Ok(_mapper.Map<BookingDto>(booking));
        }

        [HttpPost]
        [Authorize(Roles = "super_admin,admin,security_staff,resident")]
        public IActionResult Create([FromBody] CreateBookingDto dto)
        {
            var booking = _mapper.Map<Booking>(dto);
            _context.Bookings.Add(booking);
            _context.SaveChanges();

            // Notify resident (if UserId is available and not null)
            if (booking.UserId != null)
            {
                var user = _context.UserAccounts.FirstOrDefault(u => u.UserId == booking.UserId);
                if (user != null)
                {
                    var userIdStr = user.UserId.ToString();
                    _hubContext.Clients.User(userIdStr).SendAsync("ReceiveNotification", $"A new booking has been created for you. BookingId: {booking.BookingId}");
                    if (!string.IsNullOrEmpty(user.Email))
                    {
                        _notificationService.SendNotification(
                            user.Email,
                            "Booking Created",
                            $"A new booking has been created for you. BookingId: {booking.BookingId}"
                        );
                    }
                }
            }
            return CreatedAtAction(nameof(Get), new { id = booking.BookingId }, _mapper.Map<BookingDto>(booking));
        }

        [HttpPut("{id}")]
        [Authorize(Roles = "super_admin,admin,security_staff,resident")]
        public IActionResult Update(int id, [FromBody] UpdateBookingDto dto)
        {
            var existing = _context.Bookings.Find(id);
            if (existing == null) return NotFound();

            _mapper.Map(dto, existing);
            _context.SaveChanges();
            return NoContent();
        }

        [HttpDelete("{id}")]
        [Authorize(Roles = "super_admin,admin,resident")]
        public IActionResult Delete(int id)
        {
            var booking = _context.Bookings.Find(id);
            if (booking == null) return NotFound();
            _context.Bookings.Remove(booking);
            _context.SaveChanges();
            return NoContent();
        }
    }
}