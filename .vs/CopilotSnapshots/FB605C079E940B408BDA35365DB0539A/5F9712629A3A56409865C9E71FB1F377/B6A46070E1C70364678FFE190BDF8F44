import React, { useEffect, useState } from 'react';
import { API_BASE_URL } from '../config';
import { useAuth } from '../contexts/AuthContext';
import Button from '../components/UI/Button';
import Input from '../components/UI/Input';

const emptyForm = {
    name: '',
    description: '',
    hourlyRate: '',
    maxCapacity: '',
    openingTime: '',
    closingTime: ''
};

const emptyBookingForm = {
    amenityId: '',
    date: '',
    startTime: '',
    endTime: ''
};

const STATUS_OPTIONS = ['Pending', 'Approved', 'Rejected', 'Completed'];

const AmenitiesPage = () => {
    const { user } = useAuth();
    const [tab, setTab] = useState('amenities');
    const [amenities, setAmenities] = useState([]);
    const [form, setForm] = useState(emptyForm);
    const [editingId, setEditingId] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [showBooking, setShowBooking] = useState(null); // amenityId or null
    const [bookingForm, setBookingForm] = useState(emptyBookingForm);
    const [bookings, setBookings] = useState([]);
    const [bookingError, setBookingError] = useState('');
    const [bookingLoading, setBookingLoading] = useState(false);
    const [statusEdit, setStatusEdit] = useState({}); // { [bookingId]: status }

    if (!user || (user.role !== 'admin' && user.role !== 'resident')) {
        return <div>Access Denied. You don't have permission to access this page.</div>;
    }

    const getAuthHeaders = () => ({
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
    });

    const fetchAmenities = async () => {
        try {
            const res = await fetch(`${API_BASE_URL}/amenities`, { headers: getAuthHeaders() });
            if (!res.ok) throw new Error('Failed to load amenities');
            const data = await res.json();
            setAmenities(data);
        } catch (err) {
            setError(err.message);
        }
    };

    const fetchBookings = async () => {
        try {
            const res = await fetch(`${API_BASE_URL}/bookings`, { headers: getAuthHeaders() });
            if (!res.ok) throw new Error('Failed to load bookings');
            const data = await res.json();
            if (user.role === 'resident') {
                setBookings(data.filter(b => b.userId === user.userId));
            } else {
                setBookings(data);
            }
        } catch (err) {
            setBookingError(err.message);
        }
    };

    useEffect(() => { fetchAmenities(); fetchBookings(); }, []);

    // Amenity form logic
    const handleChange = e => {
        const { name, value } = e.target;
        setForm({ ...form, [name]: value });
    };

    const handleSubmit = async e => {
        e.preventDefault();
        setError('');
        setLoading(true);
        try {
            const payload = {
                name: form.name,
                description: form.description,
                hourlyRate: parseFloat(form.hourlyRate),
                maxCapacity: parseInt(form.maxCapacity, 10),
                openingTime: form.openingTime,
                closingTime: form.closingTime,
                societyId: user.societyId
            };
            let url = `${API_BASE_URL}/amenities`;
            let method = 'POST';
            if (editingId) {
                url = `${API_BASE_URL}/amenities/${editingId}`;
                method = 'PUT';
            }
            const res = await fetch(url, {
                method,
                headers: getAuthHeaders(),
                body: JSON.stringify(payload)
            });
            if (!res.ok) throw new Error('Failed to save amenity');
            setForm(emptyForm);
            setEditingId(null);
            fetchAmenities();
        } catch {
            setError('Failed to save amenity');
        }
        setLoading(false);
    };

    const handleEdit = amenity => {
        setForm({
            name: amenity.name,
            description: amenity.description || '',
            hourlyRate: amenity.hourlyRate || '',
            maxCapacity: amenity.maxCapacity || '',
            openingTime: amenity.openingTime || '',
            closingTime: amenity.closingTime || ''
        });
        setEditingId(amenity.amenityId);
    };

    const handleDelete = async id => {
        if (!window.confirm('Delete this amenity?')) return;
        setLoading(true);
        try {
            await fetch(`${API_BASE_URL}/amenities/${id}`, {
                method: 'DELETE',
                headers: getAuthHeaders()
            });
            fetchAmenities();
        } catch {
            setError('Failed to delete amenity');
        }
        setLoading(false);
    };

    // Booking logic
    const openBooking = amenityId => {
        setShowBooking(amenityId);
        setBookingForm({ amenityId, date: '', startTime: '', endTime: '' });
        setBookingError('');
    };
    const closeBooking = () => {
        setShowBooking(null);
        setBookingForm(emptyBookingForm);
        setBookingError('');
    };
    const handleBookingChange = e => {
        const { name, value } = e.target;
        setBookingForm({ ...bookingForm, [name]: value });
    };
    const handleBookingSubmit = async e => {
        e.preventDefault();
        setBookingError('');
        setBookingLoading(true);
        try {
            const payload = {
                amenityId: bookingForm.amenityId,
                userId: user.userId,
                flatId: user.flatId,
                startDate: bookingForm.date,
                endDate: bookingForm.date,
                startTime: bookingForm.startTime,
                endTime: bookingForm.endTime,
                status: 'Pending',
                paid: false
            };
            const res = await fetch(`${API_BASE_URL}/bookings`, {
                method: 'POST',
                headers: getAuthHeaders(),
                body: JSON.stringify(payload)
            });
            if (!res.ok) throw new Error('Failed to book amenity');
            closeBooking();
            fetchBookings();
        } catch {
            setBookingError('Failed to book amenity');
        }
        setBookingLoading(false);
    };

    // Admin booking status logic
    const handleStatusChange = (bookingId, status) => {
        setStatusEdit(prev => ({ ...prev, [bookingId]: status }));
    };
    const handleStatusUpdate = async (booking) => {
        const newStatus = statusEdit[booking.bookingId] || booking.status;
        if (newStatus === booking.status) return;
        setLoading(true);
        try {
            const payload = { ...booking, status: newStatus };
            const res = await fetch(`${API_BASE_URL}/bookings/${booking.bookingId}`, {
                method: 'PUT',
                headers: getAuthHeaders(),
                body: JSON.stringify(payload)
            });
            if (!res.ok) throw new Error('Failed to update status');
            fetchBookings();
        } catch {
            setError('Failed to update status');
        }
        setLoading(false);
    };

    return (
        <div className="max-w-5xl mx-auto py-8 px-4">
            <h1 className="text-2xl font-bold mb-6">Amenities & Bookings</h1>
            <div className="mb-6 flex space-x-4">
                <button
                    className={`px-4 py-2 rounded-t-lg font-semibold border-b-2 ${tab === 'amenities' ? 'border-purple-600 text-purple-700 bg-purple-50' : 'border-transparent text-gray-500 bg-gray-100'}`}
                    onClick={() => setTab('amenities')}
                >
                    Amenities
                </button>
                {user.role === 'admin' && (
                    <button
                        className={`px-4 py-2 rounded-t-lg font-semibold border-b-2 ${tab === 'bookings' ? 'border-purple-600 text-purple-700 bg-purple-50' : 'border-transparent text-gray-500 bg-gray-100'}`}
                        onClick={() => setTab('bookings')}
                    >
                        Bookings
                    </button>
                )}
            </div>
            <div className="bg-white rounded-lg shadow p-6">
                {tab === 'amenities' && (
                    <>
                        {user.role === 'admin' && (
                            <form onSubmit={handleSubmit} className="flex flex-wrap gap-2 mb-4 items-end">
                                <div className="flex flex-col">
                                    <label htmlFor="name" className="mb-1 font-medium text-gray-700">Name</label>
                                    <Input name="name" id="name" value={form.name} onChange={handleChange} placeholder="Name" required />
                                </div>
                                <div className="flex flex-col">
                                    <label htmlFor="description" className="mb-1 font-medium text-gray-700">Description</label>
                                    <Input name="description" id="description" value={form.description} onChange={handleChange} placeholder="Description" />
                                </div>
                                <div className="flex flex-col">
                                    <label htmlFor="hourlyRate" className="mb-1 font-medium text-gray-700">Hourly Rate</label>
                                    <Input name="hourlyRate" id="hourlyRate" value={form.hourlyRate} onChange={handleChange} placeholder="Hourly Rate" type="number" min="0" step="0.01" required />
                                </div>
                                <div className="flex flex-col">
                                    <label htmlFor="maxCapacity" className="mb-1 font-medium text-gray-700">Max Capacity</label>
                                    <Input name="maxCapacity" id="maxCapacity" value={form.maxCapacity} onChange={handleChange} placeholder="Max Capacity" type="number" min="1" required />
                                </div>
                                <div className="flex flex-col">
                                    <label htmlFor="openingTime" className="mb-1 font-medium text-gray-700">Opening Time</label>
                                    <Input name="openingTime" id="openingTime" value={form.openingTime} onChange={handleChange} placeholder="Opening Time (HH:mm)" type="time" required />
                                </div>
                                <div className="flex flex-col">
                                    <label htmlFor="closingTime" className="mb-1 font-medium text-gray-700">Closing Time</label>
                                    <Input name="closingTime" id="closingTime" value={form.closingTime} onChange={handleChange} placeholder="Closing Time (HH:mm)" type="time" required />
                                </div>
                                <Button type="submit" variant="primary" disabled={loading}>{editingId ? 'Update' : 'Add'}</Button>
                                {editingId && (
                                    <Button type="button" variant="secondary" onClick={() => { setEditingId(null); setForm(emptyForm); }}>Cancel</Button>
                                )}
                            </form>
                        )}
                        {error && <div className="text-red-600 mb-2">{error}</div>}
                        <div className="overflow-x-auto">
                            <table className="min-w-full border text-sm">
                                <thead>
                                    <tr className="bg-gray-100">
                                        <th className="px-4 py-2 border">Name</th>
                                        <th className="px-4 py-2 border">Description</th>
                                        <th className="px-4 py-2 border">Hourly Rate</th>
                                        <th className="px-4 py-2 border">Max Capacity</th>
                                        <th className="px-4 py-2 border">Opening Time</th>
                                        <th className="px-4 py-2 border">Closing Time</th>
                                        {user.role === 'admin' && <th className="px-4 py-2 border">Actions</th>}
                                        {user.role === 'resident' && <th className="px-4 py-2 border">Book</th>}
                                    </tr>
                                </thead>
                                <tbody>
                                    {amenities.map(a => (
                                        <tr key={a.amenityId}>
                                            <td className="border px-4 py-2">{a.name}</td>
                                            <td className="border px-4 py-2">{a.description}</td>
                                            <td className="border px-4 py-2">{a.hourlyRate}</td>
                                            <td className="border px-4 py-2">{a.maxCapacity}</td>
                                            <td className="border px-4 py-2">{a.openingTime}</td>
                                            <td className="border px-4 py-2">{a.closingTime}</td>
                                            {user.role === 'admin' && (
                                                <td className="border px-4 py-2 space-x-2">
                                                    <Button type="button" variant="secondary" onClick={() => handleEdit(a)} size="sm">Edit</Button>
                                                    <Button type="button" variant="danger" onClick={() => handleDelete(a.amenityId)} size="sm">Delete</Button>
                                                </td>
                                            )}
                                            {user.role === 'resident' && (
                                                <td className="border px-4 py-2">
                                                    <Button type="button" variant="primary" size="sm" onClick={() => openBooking(a.amenityId)}>Book</Button>
                                                    {showBooking === a.amenityId && (
                                                        <form onSubmit={handleBookingSubmit} className="mt-2 space-y-2 bg-gray-50 p-2 rounded">
                                                            <div className="flex flex-col">
                                                                <label htmlFor="date" className="mb-1 font-medium text-gray-700">Date</label>
                                                                <Input name="date" id="date" type="date" value={bookingForm.date} onChange={handleBookingChange} required />
                                                            </div>
                                                            <div className="flex flex-col">
                                                                <label htmlFor="startTime" className="mb-1 font-medium text-gray-700">Start Time</label>
                                                                <Input name="startTime" id="startTime" type="time" value={bookingForm.startTime} onChange={handleBookingChange} required />
                                                            </div>
                                                            <div className="flex flex-col">
                                                                <label htmlFor="endTime" className="mb-1 font-medium text-gray-700">End Time</label>
                                                                <Input name="endTime" id="endTime" type="time" value={bookingForm.endTime} onChange={handleBookingChange} required />
                                                            </div>
                                                            <div className="flex gap-2">
                                                                <Button type="submit" variant="primary" size="sm" disabled={bookingLoading}>Confirm</Button>
                                                                <Button type="button" variant="secondary" size="sm" onClick={closeBooking}>Cancel</Button>
                                                            </div>
                                                            {bookingError && <div className="text-red-600 text-xs">{bookingError}</div>}
                                                        </form>
                                                    )}
                                                </td>
                                            )}
                                        </tr>
                                    ))}
                                    {amenities.length === 0 && (
                                        <tr><td colSpan={user.role === 'admin' ? 7 : 7} className="text-center py-4">No amenities found.</td></tr>
                                    )}
                                </tbody>
                            </table>
                        </div>
                        {/* Resident's bookings */}
                        {user.role === 'resident' && (
                            <div className="mt-8">
                                <h2 className="text-lg font-semibold mb-2">My Amenity Bookings</h2>
                                {bookingError && <div className="text-red-600 mb-2">{bookingError}</div>}
                                <div className="overflow-x-auto">
                                    <table className="min-w-full border text-sm">
                                        <thead>
                                            <tr className="bg-gray-100">
                                                <th className="px-4 py-2 border">Amenity</th>
                                                <th className="px-4 py-2 border">Date</th>
                                                <th className="px-4 py-2 border">Start Time</th>
                                                <th className="px-4 py-2 border">End Time</th>
                                                <th className="px-4 py-2 border">Status</th>
                                                <th className="px-4 py-2 border">Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {bookings.map(b => {
                                                const amenity = amenities.find(a => a.amenityId === b.amenityId);
                                                return (
                                                    <tr key={b.bookingId}>
                                                        <td className="border px-4 py-2">{amenity ? amenity.name : b.amenityId}</td>
                                                        <td className="border px-4 py-2">{b.startDate}</td>
                                                        <td className="border px-4 py-2">{b.startTime}</td>
                                                        <td className="border px-4 py-2">{b.endTime}</td>
                                                        <td className="border px-4 py-2">{b.status}</td>
                                                        <td className="border px-4 py-2">
                                                            {b.status !== 'Cancelled' && b.status !== 'Completed' && (
                                                                <Button
                                                                    type="button"
                                                                    variant="danger"
                                                                    size="sm"
                                                                    onClick={async () => {
                                                                        try {
                                                                            const payload = { ...b, status: 'Cancelled' };
                                                                            const res = await fetch(`${API_BASE_URL}/bookings/${b.bookingId}`, {
                                                                                method: 'PUT',
                                                                                headers: getAuthHeaders(),
                                                                                body: JSON.stringify(payload)
                                                                            });
                                                                            if (!res.ok) throw new Error('Failed to cancel booking');
                                                                            fetchBookings();
                                                                        } catch {
                                                                            setBookingError('Failed to cancel booking');
                                                                        }
                                                                    }}
                                                                >
                                                                    Cancel
                                                                </Button>
                                                            )}
                                                        </td>
                                                    </tr>
                                                );
                                            })}
                                            {bookings.length === 0 && (
                                                <tr><td colSpan={6} className="text-center py-4">No bookings found.</td></tr>
                                            )}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        )}
                    </>
                )}
                {tab === 'bookings' && user.role === 'admin' && (
                    <div>
                        <h2 className="text-lg font-semibold mb-4">Amenity Bookings</h2>
                        {bookingError && <div className="text-red-600 mb-2">{bookingError}</div>}
                        <div className="overflow-x-auto">
                            <table className="min-w-full border text-sm">
                                <thead>
                                    <tr className="bg-gray-100">
                                        <th className="px-4 py-2 border">Booking ID</th>
                                        <th className="px-4 py-2 border">Amenity</th>
                                        <th className="px-4 py-2 border">User ID</th>
                                        <th className="px-4 py-2 border">Date</th>
                                        <th className="px-4 py-2 border">Start Time</th>
                                        <th className="px-4 py-2 border">End Time</th>
                                        <th className="px-4 py-2 border">Status</th>
                                        <th className="px-4 py-2 border">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {bookings.map(b => {
                                        const amenity = amenities.find(a => a.amenityId === b.amenityId);
                                        return (
                                            <tr key={b.bookingId}>
                                                <td className="border px-4 py-2">{b.bookingId}</td>
                                                <td className="border px-4 py-2">{amenity ? amenity.name : b.amenityId}</td>
                                                <td className="border px-4 py-2">{b.userId}</td>
                                                <td className="border px-4 py-2">{b.startDate}</td>
                                                <td className="border px-4 py-2">{b.startTime}</td>
                                                <td className="border px-4 py-2">{b.endTime}</td>
                                                <td className="border px-4 py-2">
                                                    <select
                                                        value={statusEdit[b.bookingId] || b.status}
                                                        onChange={e => handleStatusChange(b.bookingId, e.target.value)}
                                                        className="border rounded px-2 py-1"
                                                        disabled={b.status === 'Cancelled'}
                                                    >
                                                        {STATUS_OPTIONS.map(opt => (
                                                            <option key={opt} value={opt}>{opt}</option>
                                                        ))}
                                                    </select>
                                                </td>
                                                <td className="border px-4 py-2">
                                                    <Button
                                                        type="button"
                                                        variant="primary"
                                                        size="sm"
                                                        disabled={b.status === 'Cancelled' || (statusEdit[b.bookingId] || b.status) === b.status}
                                                        onClick={() => handleStatusUpdate(b)}
                                                    >
                                                        Update
                                                    </Button>
                                                </td>
                                            </tr>
                                        );
                                    })}
                                    {bookings.length === 0 && (
                                        <tr><td colSpan={8} className="text-center py-4">No bookings found.</td></tr>
                                    )}
                                </tbody>
                            </table>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default AmenitiesPage;
