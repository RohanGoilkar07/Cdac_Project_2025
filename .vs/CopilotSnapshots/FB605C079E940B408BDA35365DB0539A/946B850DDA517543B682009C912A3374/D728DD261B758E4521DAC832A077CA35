import React, { useEffect, useState } from 'react';
import { API_BASE_URL } from '../../config';
import Button from '../UI/Button';
import Input from '../UI/Input';
import { useAuth } from '../../contexts/AuthContext';

const ResidentsList = () => {
  const { user } = useAuth();
  const [residents, setResidents] = useState([]);
  const [flats, setFlats] = useState([]);
  const [wings, setWings] = useState([]);
  const [society, setSociety] = useState(null);
  const [filterWing, setFilterWing] = useState('');
  const [form, setForm] = useState({ name: '', email: '', phone: '', password: '', flatId: '' });
  const [editingId, setEditingId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [phoneError, setPhoneError] = useState('');
  const [emailError, setEmailError] = useState('');
  const [passwordError, setPasswordError] = useState('');

  const getAuthHeaders = () => {
    const token = localStorage.getItem('token');
    return {
      'Content-Type': 'application/json',
      ...(token ? { 'Authorization': `Bearer ${token}` } : {})
    };
  };

  // Fetch admin's society info
  const fetchSociety = async () => {
    if (!user?.societyId) return;
    try {
      const res = await fetch(`${API_BASE_URL}/societies/${user.societyId}`, {
        headers: getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to load society');
      const data = await res.json();
      setSociety(data);
    } catch {
      setSociety(null);
    }
  };

  // Fetch wings for admin's society only
  const fetchWings = async () => {
    try {
      const res = await fetch(`${API_BASE_URL}/wings`, {
        headers: getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to load wings');
      const data = await res.json();
      setWings(data.filter(w => w.societyId === user.societyId));
    } catch {
      setWings([]);
    }
  };

  // Fetch flats for admin's society only
  const fetchFlats = async () => {
    try {
      const res = await fetch(`${API_BASE_URL}/flats`, {
        headers: getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to load flats');
      const data = await res.json();
      setFlats(data.filter(f => f.wing && f.wing.societyId === user.societyId));
    } catch {
      setFlats([]);
    }
  };

  // Fetch residents for admin's society only
  const fetchResidents = async () => {
    setLoading(true);
    try {
      const res = await fetch(`${API_BASE_URL}/users`, {
        headers: getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to load residents');
      const data = await res.json();
      setResidents(data.filter(r => r.role === 'resident' && r.societyId === user.societyId));
    } catch {
      setError('Failed to load residents');
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchSociety();
    fetchWings();
    fetchFlats();
    fetchResidents();
    // eslint-disable-next-line
  }, [user?.societyId]);

  // Filter residents by selected wing
  const filteredResidents = filterWing
    ? residents.filter(r => {
        const flat = flats.find(f => f.flatId === r.flatId);
        return flat && String(flat.wingId) === filterWing;
      })
    : residents;

  const handleChange = e => {
    const { name, value } = e.target;
    if (name === 'phone') {
      if (!/^\d{0,10}$/.test(value)) return;
      setPhoneError(value.length === 10 ? '' : 'Phone number must be exactly 10 digits');
    }
    if (name === 'email') {
      setEmailError(value.includes('@') && value.endsWith('.com') ? '' : 'Email must contain @ and end with .com');
    }
    if (name === 'password') {
      const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z\d]).+$/;
      setPasswordError(passwordPattern.test(value)
        ? ''
        : 'Password must have 1 uppercase, 1 lowercase, 1 number, 1 special character');
    }
    setForm({ ...form, [name]: value });
  };

  const handleSubmit = async e => {
    e.preventDefault();
    setError('');
    setLoading(true);
    if (!/^\d{10}$/.test(form.phone)) {
      setError('Phone number must be exactly 10 digits');
      setLoading(false);
      return;
    }
    if (!form.email.includes('@') || !form.email.endsWith('.com')) {
      setError('Email must contain @ and end with .com');
      setLoading(false);
      return;
    }
    const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z\d]).+$/;
    if (!editingId && !passwordPattern.test(form.password)) {
      setError('Password must have 1 uppercase, 1 lowercase, 1 number, 1 special character');
      setLoading(false);
      return;
    }
    try {
      const payload = {
        name: form.name,
        email: form.email,
        phone: form.phone,
        password: form.password,
        role: 'resident',
        societyId: user.societyId,
        flatId: form.flatId ? parseInt(form.flatId, 10) : null
      };
      let url = `${API_BASE_URL}/users`;
      let method = 'POST';
      if (editingId) {
        url = `${API_BASE_URL}/users/${editingId}`;
        method = 'PUT';
        payload.userId = editingId;
        delete payload.password; // Don't send password on update
      }
      // Restrict update/delete to admin's own society
      if (editingId) {
        const resident = residents.find(r => r.userId === editingId);
        if (resident && resident.societyId !== user.societyId) {
          setError('You can only edit residents from your own society.');
          setLoading(false);
          return;
        }
      }
      const res = await fetch(url, {
        method,
        headers: getAuthHeaders(),
        body: JSON.stringify(payload)
      });
      if (!res.ok) throw new Error('Failed to save resident');
      setForm({ name: '', email: '', phone: '', password: '', flatId: '' });
      setEditingId(null);
      fetchResidents();
    } catch {
      setError('Failed to save resident');
    }
    setLoading(false);
  };

  const handleEdit = resident => {
    if (resident.societyId !== user.societyId) {
      setError('You can only edit residents from your own society.');
      return;
    }
    setForm({
      name: resident.name,
      email: resident.email,
      phone: resident.phone,
      password: '',
      flatId: resident.flatId ? String(resident.flatId) : ''
    });
    setEditingId(resident.userId);
  };

  const handleDelete = async id => {
    const resident = residents.find(r => r.userId === id);
    if (!resident || resident.societyId !== user.societyId) {
      setError('You can only delete residents from your own society.');
      return;
    }
    if (!window.confirm('Delete this resident?')) return;
    setLoading(true);
    try {
      await fetch(`${API_BASE_URL}/users/${id}`, {
        method: 'DELETE',
        headers: getAuthHeaders()
      });
      fetchResidents();
    } catch {
      setError('Failed to delete resident');
    }
    setLoading(false);
  };

  return (
    <div>
      <h2 className="text-lg font-semibold mb-4">Residents</h2>
      {society && (
        <div className="mb-4 p-3 bg-gray-50 rounded border text-gray-700">
          <span className="font-medium">Society:</span> {society.name}
        </div>
      )}
      <form onSubmit={handleSubmit} className="flex flex-wrap gap-2 mb-4 items-end">
        <div className="flex flex-col">
          <label htmlFor="resident-name" className="font-semibold mb-1">Name</label>
          <Input id="resident-name" name="name" value={form.name} onChange={handleChange} placeholder="Name" required />
        </div>
        <div className="flex flex-col">
          <label htmlFor="resident-email" className="font-semibold mb-1">Email</label>
          <Input id="resident-email" name="email" value={form.email} onChange={handleChange} placeholder="Email" type="email" required />
          {emailError && <span className="text-red-600 text-xs mt-1">{emailError}</span>}
        </div>
        <div className="flex flex-col">
          <label htmlFor="resident-phone" className="font-semibold mb-1">Phone</label>
          <Input id="resident-phone" name="phone" value={form.phone} onChange={handleChange} placeholder="Phone" required />
          {phoneError && <span className="text-red-600 text-xs mt-1">{phoneError}</span>}
        </div>
        {!editingId && (
          <div className="flex flex-col">
            <label htmlFor="resident-password" className="font-semibold mb-1">Password</label>
            <Input id="resident-password" name="password" value={form.password} onChange={handleChange} placeholder="Password" type="password" required />
            {passwordError && <span className="text-red-600 text-xs mt-1">{passwordError}</span>}
          </div>
        )}
        <div className="flex flex-col">
          <label htmlFor="resident-flatId" className="font-semibold mb-1">Flat</label>
          <select id="resident-flatId" name="flatId" value={form.flatId} onChange={handleChange} className="border rounded px-2 py-1" required>
            <option value="">Select Flat</option>
            {flats.filter(f => f.status === 'Vacant').map(f => (
              <option key={f.flatId} value={f.flatId}>{f.flatNumber} ({f.floorNumber})</option>
            ))}
          </select>
        </div>
        <Button type="submit" variant="primary" disabled={loading}>
          {editingId ? 'Update' : 'Add'}
        </Button>
        {editingId && (
          <Button type="button" variant="secondary" onClick={() => { setForm({ name: '', email: '', phone: '', password: '', flatId: '' }); setEditingId(null); }}>
            Cancel
          </Button>
        )}
      </form>
      <div className="flex gap-2 mb-4 items-center">
        <label className="font-medium">Filter by Wing:</label>
        <select value={filterWing} onChange={e => setFilterWing(e.target.value)} className="border rounded px-2 py-1">
          <option value="">All Wings</option>
          {wings.map(w => (
            <option key={w.wingId} value={w.wingId}>{w.name}</option>
          ))}
        </select>
      </div>
      {error && <div className="text-red-600 mb-2">{error}</div>}
      <div className="overflow-x-auto">
        <table className="min-w-full border text-sm">
          <thead>
            <tr className="bg-gray-100">
              <th className="px-4 py-2 border">Name</th>
              <th className="px-4 py-2 border">Email</th>
              <th className="px-4 py-2 border">Phone</th>
              <th className="px-4 py-2 border">Flat</th>
              <th className="px-4 py-2 border">Verified</th>
              <th className="px-4 py-2 border">Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredResidents.map(resident => (
              <tr key={resident.userId}>
                <td className="border px-4 py-2">{resident.name}</td>
                <td className="border px-4 py-2">{resident.email}</td>
                <td className="border px-4 py-2">{resident.phone}</td>
                <td className="border px-4 py-2">{flats.find(f => f.flatId === resident.flatId)?.flatNumber || '-'}</td>
                <td className="border px-4 py-2">{resident.isVerified ? 'Yes' : 'No'}</td>
                <td className="border px-4 py-2 space-x-2">
                  <Button type="button" variant="secondary" onClick={() => handleEdit(resident)} size="sm">Edit</Button>
                  <Button type="button" variant="danger" onClick={() => handleDelete(resident.userId)} size="sm">Delete</Button>
                  <Button type="button" size="sm" variant={resident.isVerified ? 'secondary' : 'success'} onClick={async () => {
                    setLoading(true);
                    try {
                      const payload = { ...resident, isVerified: !resident.isVerified };
                      await fetch(`${API_BASE_URL}/users/${resident.userId}`, {
                        method: 'PUT',
                        headers: getAuthHeaders(),
                        body: JSON.stringify(payload)
                      });
                      fetchResidents();
                    } catch {
                      setError('Failed to update verification status');
                    }
                    setLoading(false);
                  }}>{resident.isVerified ? 'Unverify' : 'Verify'}</Button>
                </td>
              </tr>
            ))}
            {filteredResidents.length === 0 && (
              <tr><td colSpan={6} className="text-center py-4">No residents found.</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ResidentsList;
