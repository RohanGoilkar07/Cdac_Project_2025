import React, { useEffect, useState, useRef } from 'react';
import { API_BASE_URL } from '../config';
import { useAuth } from '../contexts/AuthContext';
import Button from '../components/UI/Button';
import Input from '../components/UI/Input';

const emptyForm = {
    title: '',
    content: '',
    targetWingIds: [],
    targetFlatIds: [],
    isGlobal: false
};

const DropdownCheckbox = ({ options, selected, onChange, label, disabled }) => {
    const [open, setOpen] = useState(false);
    const ref = useRef();

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (ref.current && !ref.current.contains(event.target)) {
                setOpen(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    return (
        <div className="relative inline-block w-48" ref={ref}>
            <button type="button" className={`border rounded px-2 py-1 w-full text-left bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400 ${disabled ? 'bg-gray-100 cursor-not-allowed' : ''}`} onClick={() => setOpen(!open)} disabled={disabled}>
                <span className="truncate block">{selected.length > 0 ? selected.map(id => options.find(o => o.value === id)?.label).filter(Boolean).join(', ') : `Select ${label}`}</span>
                <span className="float-right text-gray-400">▼</span>
            </button>
            {open && !disabled && (
                <div className="absolute z-10 bg-white border rounded shadow w-full max-h-56 overflow-auto mt-1">
                    <div className="flex justify-end p-1 border-b">
                        <button type="button" className="text-xs text-blue-600 underline" onClick={() => onChange([])}>Clear Selection</button>
                    </div>
                    {options.map(opt => (
                        <label key={opt.value} className="flex items-center px-2 py-1 cursor-pointer hover:bg-blue-50">
                            <input
                                type="checkbox"
                                checked={selected.includes(opt.value)}
                                onChange={e => {
                                    if (e.target.checked) {
                                        onChange([...selected, opt.value]);
                                    } else {
                                        onChange(selected.filter(id => id !== opt.value));
                                    }
                                }}
                                className="accent-blue-600"
                            />
                            <span className="ml-2 truncate">{opt.label}</span>
                        </label>
                    ))}
                </div>
            )}
        </div>
    );
};

const AnnouncementsPage = () => {
    const { user } = useAuth();
    const [announcements, setAnnouncements] = useState([]);
    const [wings, setWings] = useState([]);
    const [flats, setFlats] = useState([]);
    const [form, setForm] = useState(emptyForm);
    const [editingId, setEditingId] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    // Allow both admin and resident roles to access the page
    if (!user || (user.role !== 'admin' && user.role !== 'resident')) {
        return <div>Access Denied. You don't have permission to access this page.</div>;
    }

    const getAuthHeaders = () => ({
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
    });

    const fetchAnnouncements = async () => {
        try {
            const res = await fetch(`${API_BASE_URL}/announcements`, { headers: getAuthHeaders() });
            if (!res.ok) throw new Error('Failed to load announcements');
            const data = await res.json();
            // Resident: show only announcements for their flat, wing, or whole society
            if (user.role === 'resident') {
                setAnnouncements(data.filter(a => {
                    if (a.isGlobal && a.societyId === user.societyId) return true;
                    if (Array.isArray(a.targetFlatIds) && a.targetFlatIds.includes(user.flatId)) return true;
                    if (Array.isArray(a.targetWingIds) && user.flatId) {
                        const myFlat = flats.find(f => f.flatId === user.flatId);
                        if (myFlat && a.targetWingIds.includes(myFlat.wing.wingId)) return true;
                    }
                    return false;
                }));
            } else {
                setAnnouncements(data.filter(a => a.societyId === user.societyId));
            }
        } catch (err) {
            setError(err.message);
        }
    };

    const fetchWings = async () => {
        try {
            const res = await fetch(`${API_BASE_URL}/wings`, { headers: getAuthHeaders() });
            if (!res.ok) throw new Error('Failed to load wings');
            const data = await res.json();
            setWings(data.filter(w => w.societyId === user.societyId));
        } catch {
            setWings([]);
        }
    };

    const fetchFlats = async () => {
        try {
            const res = await fetch(`${API_BASE_URL}/flats`, { headers: getAuthHeaders() });
            if (!res.ok) throw new Error('Failed to load flats');
            const data = await res.json();
            setFlats(data.filter(f => f.wing && f.wing.societyId === user.societyId));
        } catch {
            setFlats([]);
        }
    };

    useEffect(() => { fetchAnnouncements(); fetchWings(); fetchFlats(); }, []);

    const handleChange = e => {
        const { name, value, type, checked } = e.target;
        if (type === 'checkbox') {
            setForm({ ...form, [name]: checked });
        } else {
            setForm({ ...form, [name]: value });
        }
    };

    const handleWingsChange = selected => setForm({ ...form, targetWingIds: selected });
    const handleFlatsChange = selected => setForm({ ...form, targetFlatIds: selected });

    // Filter flats to exclude those belonging to selected wings
    const filteredFlats = form.targetWingIds.length > 0
        ? flats.filter(f => !form.targetWingIds.includes(String(f.wing.wingId)))
        : flats;

    // Helper to check if all wings/flats are selected
    useEffect(() => {
        if (!form.isGlobal) {
            if (form.targetWingIds.length === wings.length && wings.length > 0) {
                setForm(f => ({ ...f, isGlobal: true, targetWingIds: [], targetFlatIds: [] }));
            } else if (form.targetFlatIds.length === filteredFlats.length && filteredFlats.length > 0) {
                setForm(f => ({ ...f, isGlobal: true, targetWingIds: [], targetFlatIds: [] }));
            }
        }
        // If isGlobal is unchecked, do not auto-select
    }, [form.targetWingIds, form.targetFlatIds, wings.length, filteredFlats.length]);

    const handleSubmit = async e => {
        e.preventDefault();
        setError('');
        setLoading(true);
        try {
            const isGlobal = form.isGlobal === true || form.isGlobal === 'true';
            // Get current India time
            const indiaDate = new Date().toLocaleString('en-US', { timeZone: 'Asia/Kolkata' });
            const createdAt = new Date(indiaDate);
            const payload = {
                title: form.title,
                content: form.content,
                isGlobal,
                createdAt,
                createdBy: user?.userId,
                societyId: user?.societyId,
                targetWingIds: isGlobal ? [] : form.targetWingIds.map(id => parseInt(id, 10)),
                targetFlatIds: isGlobal ? [] : form.targetFlatIds.map(id => parseInt(id, 10))
            };
            let url = `${API_BASE_URL}/announcements`;
            let method = 'POST';
            if (editingId) {
                url = `${API_BASE_URL}/announcements/${editingId}`;
                method = 'PUT';
                payload.aid = editingId;
            }
            const res = await fetch(url, {
                method,
                headers: getAuthHeaders(),
                body: JSON.stringify(payload)
            });
            if (!res.ok) throw new Error('Failed to save announcement');
            setForm(emptyForm);
            setEditingId(null);
            fetchAnnouncements();
        } catch {
            setError('Failed to save announcement');
        }
        setLoading(false);
    };

    const handleEdit = announcement => {
        setForm({
            title: announcement.title,
            content: announcement.content || '',
            targetWingIds: Array.isArray(announcement.targetWingIds) ? announcement.targetWingIds.map(String) : [],
            targetFlatIds: Array.isArray(announcement.targetFlatIds) ? announcement.targetFlatIds.map(String) : [],
            isGlobal: !!announcement.isGlobal
        });
        setEditingId(announcement.aid);
    };

    const handleDelete = async id => {
        if (!window.confirm('Delete this announcement?')) return;
        setLoading(true);
        try {
            await fetch(`${API_BASE_URL}/announcements/${id}`, {
                method: 'DELETE',
                headers: getAuthHeaders()
            });
            fetchAnnouncements();
        } catch {
            setError('Failed to delete announcement');
        }
        setLoading(false);
    };

    return (
        <div className="max-w-5xl mx-auto py-8 px-4">
            <h1 className="text-2xl font-bold mb-6">Announcements Management</h1>
            <div className="bg-white rounded-lg shadow p-6">
                {user.role === 'admin' && (
                    <form onSubmit={handleSubmit} className="flex flex-wrap gap-2 mb-4 items-end">
                        <div className="flex flex-col">
                            <label htmlFor="title" className="mb-1 font-medium text-gray-700">Title</label>
                            <Input name="title" id="title" value={form.title} onChange={handleChange} placeholder="Title" required />
                        </div>
                        <div className="flex flex-col">
                            <label htmlFor="content" className="mb-1 font-medium text-gray-700">Message</label>
                            <Input name="content" id="content" value={form.content} onChange={handleChange} placeholder="Message" required />
                        </div>
                        <div className="w-full flex gap-2 mt-2">
                            <DropdownCheckbox
                                options={wings.map(w => ({ value: String(w.wingId), label: w.name }))}
                                selected={form.targetWingIds}
                                onChange={handleWingsChange}
                                label="Wings"
                                disabled={form.isGlobal}
                            />
                            <DropdownCheckbox
                                options={filteredFlats.map(f => ({ value: String(f.flatId), label: f.flatNumber }))}
                                selected={form.targetFlatIds}
                                onChange={handleFlatsChange}
                                label="Flats"
                                disabled={form.isGlobal}
                            />
                        </div>
                        <label className="flex items-center gap-2">
                            <input type="checkbox" name="isGlobal" checked={form.isGlobal || false} onChange={handleChange} />
                            Send to whole society
                        </label>
                        <Button type="submit" variant="primary" disabled={loading}>{editingId ? 'Update' : 'Add'}</Button>
                        {editingId && (
                            <Button type="button" variant="secondary" onClick={() => { setEditingId(null); setForm(emptyForm); }}>Cancel</Button>
                        )}
                    </form>
                )}
                {error && <div className="text-red-600 mb-2">{error}</div>}
                <div className="overflow-x-auto">
                    <table className="min-w-full border text-sm">
                        <thead>
                            <tr className="bg-gray-100">
                                <th className="px-4 py-2 border">Title</th>
                                <th className="px-4 py-2 border">Message</th>
                                <th className="px-4 py-2 border">Wings</th>
                                <th className="px-4 py-2 border">Flats</th>
                                <th className="px-4 py-2 border">Created At</th>
                                <th className="px-4 py-2 border">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {announcements.map(a => (
                                <tr key={a.aid}>
                                    <td className="border px-4 py-2">{a.title}</td>
                                    <td className="border px-4 py-2">{a.content}</td>
                                    <td className="border px-4 py-2">{
                                        a.isGlobal
                                            ? 'All Wings'
                                            : Array.isArray(a.targetWingIds) && a.targetWingIds.length > 0
                                                ? a.targetWingIds.map(id => wings.find(w => String(w.wingId) === String(id))?.name).filter(Boolean).join(', ')
                                                : '-'
                                    }</td>
                                    <td className="border px-4 py-2">{
                                        a.isGlobal
                                            ? 'All Flats'
                                            : Array.isArray(a.targetFlatIds) && a.targetFlatIds.length > 0
                                                ? a.targetFlatIds.map(id => flats.find(f => String(f.flatId) === String(id))?.flatNumber).filter(Boolean).join(', ')
                                                : '-'
                                    }</td>
                                    <td className="border px-4 py-2">{
                                        a.createdAt ?
                                            (() => {
                                                // Convert UTC to India time
                                                const utcDate = new Date(a.createdAt);
                                                const indiaOffset = 5.5 * 60;
                                                const indiaMs = utcDate.getTime() + indiaOffset * 60 * 1000;
                                                const indiaDate = new Date(indiaMs);
                                                const day = String(indiaDate.getDate()).padStart(2, '0');
                                                const month = String(indiaDate.getMonth() + 1).padStart(2, '0');
                                                const year = indiaDate.getFullYear();
                                                const time = indiaDate.toLocaleTimeString('en-IN');
                                                return `${day}/${month}/${year} ${time}`;
                                            })()
                                            : '-'
                                    }</td>
                                    <td className="border px-4 py-2 space-x-2">
                                        {user.role === 'admin' && (
                                            <>
                                                <Button type="button" variant="secondary" onClick={() => handleEdit(a)} size="sm">Edit</Button>
                                                <Button type="button" variant="danger" onClick={() => handleDelete(a.aid)} size="sm">Delete</Button>
                                            </>
                                        )}
                                    </td>
                                </tr>
                            ))}
                            {announcements.length === 0 && (
                                <tr><td colSpan={6} className="text-center py-4">No announcements found.</td></tr>
                            )}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

export default AnnouncementsPage;