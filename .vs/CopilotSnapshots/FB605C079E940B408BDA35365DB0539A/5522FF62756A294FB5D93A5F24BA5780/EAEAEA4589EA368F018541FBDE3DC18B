import React, { useEffect, useState } from 'react';
import { API_BASE_URL } from '../../config';
import Button from '../UI/Button';
import Input from '../UI/Input';
import { useAuth } from '../../contexts/AuthContext';

const FLAT_STATUS = {
  Registered: 'bg-green-100 text-green-800',
  Pending: 'bg-yellow-100 text-yellow-800'
};

const FlatsList = () => {
  const { user } = useAuth();
  const [flats, setFlats] = useState([]);
  const [wings, setWings] = useState([]);
  const [society, setSociety] = useState(null);
  const [filterWing, setFilterWing] = useState('');
  const [form, setForm] = useState({ flatNumber: '', floorNumber: '', area: '', status: 'Pending', wingId: '' });
  const [editingId, setEditingId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const getAuthHeaders = () => {
    const token = localStorage.getItem('token');
    return {
      'Content-Type': 'application/json',
      ...(token ? { 'Authorization': `Bearer ${token}` } : {})
    };
  };

  // Fetch admin's society info
  const fetchSociety = async () => {
    if (!user?.societyId) return;
    try {
      const res = await fetch(`${API_BASE_URL}/societies/${user.societyId}`, {
        headers: getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to load society');
      const data = await res.json();
      setSociety(data);
    } catch {
      setSociety(null);
    }
  };

  // Fetch wings for admin's society only
  const fetchWings = async () => {
    try {
      const res = await fetch(`${API_BASE_URL}/wings`, {
        headers: getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to load wings');
      const data = await res.json();
      setWings(data.filter(w => w.societyId === user.societyId));
    } catch {
      setWings([]);
    }
  };

  // Fetch flats for admin's society only (by filtering wings)
  const fetchFlats = async () => {
    setLoading(true);
    try {
      const res = await fetch(`${API_BASE_URL}/flats`, {
        headers: getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to load flats');
      const data = await res.json();
      // Only flats whose wingId is in the admin's society wings
      const allowedWingIds = wings.map(w => w.wingId);
      setFlats(data.filter(f => allowedWingIds.includes(f.wingId)));
    } catch {
      setError('Failed to load flats');
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchSociety();
    // Fetch wings first, then flats (so we can filter by allowed wings)
    (async () => {
      await fetchWings();
    })();
    // eslint-disable-next-line
  }, [user?.societyId]);

  useEffect(() => {
    if (wings.length > 0) fetchFlats();
    // eslint-disable-next-line
  }, [wings]);

  const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async e => {
    e.preventDefault();
    setError('');
    setLoading(true);
    try {
      const payload = {
        flatNumber: form.flatNumber,
        floorNumber: form.floorNumber,
        area: form.area ? parseFloat(form.area) : null,
        status: form.status,
        wingId: form.wingId ? parseInt(form.wingId, 10) : null
      };
      if (editingId) payload.flatId = editingId;
      // Only allow adding/editing flats for wings in admin's society
      if (!wings.some(w => w.wingId === payload.wingId)) {
        setError('You can only add or edit flats for your own society.');
        setLoading(false);
        return;
      }
      const url = editingId ? `${API_BASE_URL}/flats/${editingId}` : `${API_BASE_URL}/flats`;
      const method = editingId ? 'PUT' : 'POST';
      const res = await fetch(url, {
        method,
        headers: getAuthHeaders(),
        body: JSON.stringify(payload)
      });
      if (!res.ok) throw new Error('Failed to save flat');
      setForm({ flatNumber: '', floorNumber: '', area: '', status: 'Pending', wingId: '' });
      setEditingId(null);
      fetchFlats();
    } catch {
      setError('Failed to save flat');
    }
    setLoading(false);
  };

  const handleEdit = flat => {
    setForm({
      flatNumber: flat.flatNumber,
      floorNumber: flat.floorNumber,
      area: flat.area || '',
      status: flat.status,
      wingId: flat.wingId ? String(flat.wingId) : ''
    });
    setEditingId(flat.flatId);
  };

  const handleDelete = async id => {
    // Only allow deleting flats for wings in admin's society
    const flat = flats.find(f => f.flatId === id);
    if (!flat || !wings.some(w => w.wingId === flat.wingId)) {
      setError('You can only delete flats for your own society.');
      return;
    }
    if (!window.confirm('Delete this flat?')) return;
    setLoading(true);
    try {
      await fetch(`${API_BASE_URL}/flats/${id}`, {
        method: 'DELETE',
        headers: getAuthHeaders()
      });
      fetchFlats();
    } catch {
      setError('Failed to delete flat');
    }
    setLoading(false);
  };

  const filteredFlats = filterWing
    ? flats.filter(f => String(f.wingId) === filterWing)
    : flats;

  return (
    <div>
      <h2 className="text-lg font-semibold mb-4">Flats</h2>
      {society && (
        <div className="mb-4 p-3 bg-gray-50 rounded border text-gray-700">
          <span className="font-medium">Society:</span> {society.name}
        </div>
      )}
      <form onSubmit={handleSubmit} className="flex flex-wrap gap-2 mb-4 items-end">
        <div className="flex flex-col">
          <label htmlFor="flat-flatNumber" className="font-semibold mb-1">Flat Number</label>
          <Input id="flat-flatNumber" name="flatNumber" value={form.flatNumber} onChange={handleChange} placeholder="Flat Number" required />
        </div>
        <div className="flex flex-col">
          <label htmlFor="flat-floorNumber" className="font-semibold mb-1">Floor Number</label>
          <Input id="flat-floorNumber" name="floorNumber" value={form.floorNumber} onChange={handleChange} placeholder="Floor Number" type="text" required />
        </div>
        <div className="flex flex-col">
          <label htmlFor="flat-area" className="font-semibold mb-1">Area (sq ft)</label>
          <Input id="flat-area" name="area" value={form.area} onChange={handleChange} placeholder="Area (sq ft)" type="number" min="0" step="0.01" required />
        </div>
        <div className="flex flex-col">
          <label htmlFor="flat-status" className="font-semibold mb-1">Status</label>
          <select id="flat-status" name="status" value={form.status} onChange={handleChange} className="border rounded px-2 py-1" required>
            <option value="Pending">Pending</option>
            <option value="Registered">Registered</option>
          </select>
        </div>
        <div className="flex flex-col">
          <label htmlFor="flat-wingId" className="font-semibold mb-1">Wing</label>
          <select id="flat-wingId" name="wingId" value={form.wingId} onChange={handleChange} className="border rounded px-2 py-1" required>
            <option value="">Select Wing</option>
            {wings.map(w => (
              <option key={w.wingId} value={w.wingId}>{w.name}</option>
            ))}
          </select>
        </div>
        <Button type="submit" variant="primary" disabled={loading}>
          {editingId ? 'Update' : 'Add'}
        </Button>
        {editingId && (
          <Button type="button" variant="secondary" onClick={() => { setForm({ flatNumber: '', floorNumber: '', area: '', status: 'Pending', wingId: '' }); setEditingId(null); }}>
            Cancel
          </Button>
        )}
      </form>
      <div className="flex gap-2 mb-4 items-center">
        <label className="font-medium">Filter by Wing:</label>
        <select value={filterWing} onChange={e => setFilterWing(e.target.value)} className="border rounded px-2 py-1">
          <option value="">All Wings</option>
          {wings.map(w => (
            <option key={w.wingId} value={w.wingId}>{w.name}</option>
          ))}
        </select>
      </div>
      {error && <div className="text-red-600 mb-2">{error}</div>}
      <div className="overflow-x-auto">
        <table className="min-w-full border text-sm">
          <thead>
            <tr className="bg-gray-100">
              <th className="px-4 py-2 border">Flat Number</th>
              <th className="px-4 py-2 border">Floor</th>
              <th className="px-4 py-2 border">Area</th>
              <th className="px-4 py-2 border">Status</th>
              <th className="px-4 py-2 border">Wing</th>
              <th className="px-4 py-2 border">Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredFlats.map(flat => (
              <tr key={flat.flatId}>
                <td className="border px-4 py-2">{flat.flatNumber}</td>
                <td className="border px-4 py-2">{flat.floorNumber}</td>
                <td className="border px-4 py-2">{flat.area}</td>
                <td className="border px-4 py-2">
                  <span className={`px-2 py-1 rounded text-xs font-semibold ${FLAT_STATUS[flat.status] || ''}`}>{flat.status}</span>
                </td>
                <td className="border px-4 py-2">{wings.find(w => w.wingId === flat.wingId)?.name || '-'}</td>
                <td className="border px-4 py-2 space-x-2">
                  <Button type="button" variant="secondary" onClick={() => handleEdit(flat)} size="sm">Edit</Button>
                </td>
              </tr>
            ))}
            {filteredFlats.length === 0 && (
              <tr><td colSpan={6} className="text-center py-4">No flats found.</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default FlatsList;
