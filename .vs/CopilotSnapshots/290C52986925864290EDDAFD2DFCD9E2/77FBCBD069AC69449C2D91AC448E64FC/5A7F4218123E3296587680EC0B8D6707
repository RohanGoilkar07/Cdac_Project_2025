import React, { useEffect, useState, useRef } from 'react';
import { API_BASE_URL } from '../config';
import { useAuth } from '../contexts/AuthContext';
import Button from '../components/UI/Button';
import Input from '../components/UI/Input';

const emptyForm = {
  title: '',
  content: '',
  targetWingIds: [],
  targetFlatIds: [],
  isGlobal: false
};

const DropdownCheckbox = ({ options, selected, onChange, label, disabled }) => {
  const [open, setOpen] = useState(false);
  const ref = useRef();

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (ref.current && !ref.current.contains(event.target)) {
        setOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <div className="relative inline-block w-48" ref={ref}>
      <button type="button" className={`border rounded px-2 py-1 w-full text-left bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-400 ${disabled ? 'bg-gray-100 cursor-not-allowed' : ''}`} onClick={() => setOpen(!open)} disabled={disabled}>
        <span className="truncate block">{selected.length > 0 ? selected.map(id => options.find(o => o.value === id)?.label).filter(Boolean).join(', ') : `Select ${label}`}</span>
        <span className="float-right text-gray-400">▼</span>
      </button>
      {open && !disabled && (
        <div className="absolute z-10 bg-white border rounded shadow w-full max-h-56 overflow-auto mt-1">
          <div className="flex justify-end p-1 border-b">
            <button type="button" className="text-xs text-blue-600 underline" onClick={() => onChange([])}>Clear Selection</button>
          </div>
          {options.map(opt => (
            <label key={opt.value} className="flex items-center px-2 py-1 cursor-pointer hover:bg-blue-50">
              <input
                type="checkbox"
                checked={selected.includes(opt.value)}
                onChange={e => {
                  if (e.target.checked) {
                    onChange([...selected, opt.value]);
                  } else {
                    onChange(selected.filter(id => id !== opt.value));
                  }
                }}
                className="accent-blue-600"
              />
              <span className="ml-2 truncate">{opt.label}</span>
            </label>
          ))}
        </div>
      )}
    </div>
  );
};

const AnnouncementsPage = () => {
  const { user } = useAuth();
  const [announcements, setAnnouncements] = useState([]);
  const [wings, setWings] = useState([]);
  const [flats, setFlats] = useState([]);
  const [form, setForm] = useState(emptyForm);
  const [editingId, setEditingId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  if (!['admin', 'resident'].includes(user?.role)) return <div>Access Denied</div>;

  const getAuthHeaders = () => ({
    'Content-Type': 'application/json
