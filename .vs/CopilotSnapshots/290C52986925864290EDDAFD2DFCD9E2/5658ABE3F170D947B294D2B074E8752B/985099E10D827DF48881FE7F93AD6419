using AutoMapper;
using FluentValidation;
using HousingHubBackend.Data;
using HousingHubBackend.Dtos;
using HousingHubBackend.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System;

namespace HousingHubBackend.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ComplaintsController : ControllerBase
    {
        private readonly HousingHubDBContext _context;
        private readonly IMapper _mapper;
        private readonly IValidator<CreateComplaintDto> _createValidator;
        private readonly IValidator<UpdateComplaintDto> _updateValidator;

        public ComplaintsController(
            HousingHubDBContext context,
            IMapper mapper,
            IValidator<CreateComplaintDto> createValidator,
            IValidator<UpdateComplaintDto> updateValidator)
        {
            _context = context;
            _mapper = mapper;
            _createValidator = createValidator;
            _updateValidator = updateValidator;
        }

        [HttpGet]
        [Authorize(Roles = "super_admin,admin,security_staff,resident")]
        public IActionResult GetAll([FromQuery] int? wingId = null)
        {
            var userEmail = User?.Identity?.Name;
            var user = _context.UserAccounts.FirstOrDefault(u => u.Email == userEmail);
            if (user == null || user.Role == "super_admin" || user.Role == "security_staff")
            {
                var complaints = _context.Complaints.ToList();
                var dtos = _mapper.Map<IEnumerable<ComplaintDto>>(complaints);
                return Ok(dtos);
            }
            // Admin/Resident: restrict to own society
            var flatsQuery = _context.Flats.Where(f => f.Wing.SocietyId == user.SocietyId);
            if (user.Role == "admin" && wingId.HasValue)
            {
                flatsQuery = flatsQuery.Where(f => f.WingId == wingId.Value);
            }
            var flats = flatsQuery.Select(f => f.FlatId).ToList();
            var complaintsFiltered = _context.Complaints.Where(c => flats.Contains(c.FlatId ?? 0)).ToList();
            var dtosFiltered = _mapper.Map<IEnumerable<ComplaintDto>>(complaintsFiltered);
            return Ok(dtosFiltered);
        }

        [HttpGet("{id}")]
        [Authorize(Roles = "super_admin,admin,security_staff,resident")]
        public IActionResult Get(int id)
        {
            var complaint = _context.Complaints.Find(id);
            if (complaint == null) return NotFound();
            return Ok(_mapper.Map<ComplaintDto>(complaint));
        }

        [HttpPost]
        [Authorize(Roles = "resident")]
        public IActionResult Create([FromBody] CreateComplaintDto dto)
        {
            // Get current user
            var userEmail = User?.Identity?.Name;
            var user = _context.UserAccounts.FirstOrDefault(u => u.Email == userEmail);
            if (user == null)
                return BadRequest("User not found.");
            if (user.FlatId == null)
                return BadRequest("Resident does not have a flat assigned.");
            // Set resident's own flat
            dto.FlatId = user.FlatId;
            dto.RaisedBy = user.UserId;
            // Set defaults
            dto.Status = "Pending";
            dto.CreatedAt = DateTime.UtcNow;
            var complaint = _mapper.Map<Complaint>(dto);
            _context.Complaints.Add(complaint);
            _context.SaveChanges();
            return CreatedAtAction(nameof(Get), new { id = complaint.ComplaintId }, _mapper.Map<ComplaintDto>(complaint));
        }

        [HttpPut("{id}/resolve")]
        [Authorize(Roles = "admin")]
        public IActionResult Resolve(int id)
        {
            var complaint = _context.Complaints.Find(id);
            if (complaint == null) return NotFound();
            complaint.Status = "Resolved";
            complaint.ResolvedAt = DateTime.UtcNow;
            _context.SaveChanges();
            return Ok(_mapper.Map<ComplaintDto>(complaint));
        }

        [HttpPut("{id}")]
        [Authorize(Roles = "resident")]
        public IActionResult Update(int id, [FromBody] UpdateComplaintDto dto)
        {
            var userEmail = User?.Identity?.Name;
            var user = _context.UserAccounts.FirstOrDefault(u => u.Email == userEmail);
            var existing = _context.Complaints.Find(id);
            if (existing == null) return NotFound();
            if (existing.RaisedBy != user?.UserId) return Forbid();
            _mapper.Map(dto, existing);
            _context.SaveChanges();
            return NoContent();
        }

        [HttpDelete("{id}")]
        [Authorize(Roles = "resident")]
        public IActionResult Delete(int id)
        {
            var userEmail = User?.Identity?.Name;
            var user = _context.UserAccounts.FirstOrDefault(u => u.Email == userEmail);
            var complaint = _context.Complaints.Find(id);
            if (complaint == null) return NotFound();
            if (complaint.RaisedBy != user?.UserId) return Forbid();
            _context.Complaints.Remove(complaint);
            _context.SaveChanges();
            return NoContent();
        }
    }
}