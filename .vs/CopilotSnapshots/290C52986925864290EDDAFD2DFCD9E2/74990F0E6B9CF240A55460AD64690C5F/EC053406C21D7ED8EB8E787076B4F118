using AutoMapper;
using FluentValidation;
using HousingHubBackend.Data;
using HousingHubBackend.Dtos;
using HousingHubBackend.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System;

namespace HousingHubBackend.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ComplaintsController : ControllerBase
    {
        private readonly HousingHubDBContext _context;
        private readonly IMapper _mapper;
        private readonly IValidator<CreateComplaintDto> _createValidator;
        private readonly IValidator<UpdateComplaintDto> _updateValidator;

        public ComplaintsController(
            HousingHubDBContext context,
            IMapper mapper,
            IValidator<CreateComplaintDto> createValidator,
            IValidator<UpdateComplaintDto> updateValidator)
        {
            _context = context;
            _mapper = mapper;
            _createValidator = createValidator;
            _updateValidator = updateValidator;
        }

        [HttpGet]
        [Authorize(Roles = "super_admin,admin,security_staff,resident")]
        public IActionResult GetAll([FromQuery] int? wingId = null)
        {
            var userEmail = User?.Identity?.Name;
            var user = _context.UserAccounts.FirstOrDefault(u => u.Email == userEmail);
            if (user == null) return Unauthorized();
            // Restrict to own society
            var flatsQuery = _context.Flats.Where(f => f.Wing.SocietyId == user.Soc