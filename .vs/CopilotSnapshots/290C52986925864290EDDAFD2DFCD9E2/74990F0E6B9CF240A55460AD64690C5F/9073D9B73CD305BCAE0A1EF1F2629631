import React, { useEffect, useState } from 'react';
import { API_BASE_URL } from '../config';
import Button from './UI/Button';
import Input from './UI/Input';
import { useAuth } from '../contexts/AuthContext';

const CATEGORIES = [
  'Plumbing',
  'Electrical',
  'Cleaning',
  'Security',
  'Other'
];

const ComplaintsList = () => {
  const { user } = useAuth();
  const [complaints, setComplaints] = useState([]);
  const [flats, setFlats] = useState([]);
  const [wings, setWings] = useState([]);
  const [filterWing, setFilterWing] = useState('');
  const [form, setForm] = useState({ title: '', description: '', category: CATEGORIES[0] });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const getAuthHeaders = () => {
    const token = localStorage.getItem('token');
    return {
      'Content-Type': 'application/json',
      ...(token ? { 'Authorization': `Bearer ${token}` } : {})
    };
  };

  // Fetch wings for admin's society only
  const fetchWings = async () => {
    try {
      const res = await fetch(`${API_BASE_URL}/wings`, { headers: getAuthHeaders() });
      if (!res.ok) throw new Error('Failed to load wings');
      const data = await res.json();
      setWings(data.filter(w => w.societyId === user.societyId));
    } catch {
      setWings([]);
    }
  };

  // Fetch flats for user's society only
  const fetchFlats = async () => {
    try {
      const res = await fetch(`${API_BASE_URL}/flats`, { headers: getAuthHeaders() });
      if (!res.ok) throw new Error('Failed to load flats');
      const data = await res.json();
      setFlats(data.filter(f => f.wing && f.wing.societyId === user.societyId));
    } catch {
      setFlats([]);
    }
  };

  // Fetch complaints for user's society only, with wing filter for admin
  const fetchComplaints = async () => {
    setLoading(true);
    try {
      let url = `${API_BASE_URL}/complaints`;
      if (user.role === 'admin' && filterWing) {
        url += `?wingId=${filterWing}`;
      }
      const res = await fetch(url, { headers: getAuthHeaders() });
      if (!res.ok) throw new Error('Failed to load complaints');
      const data = await res.json();
      setComplaints(data);
    } catch {
      setError('Failed to load complaints');
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchFlats();
    if (user.role === 'admin') fetchWings();
    // eslint-disable-next-line
  }, [user?.societyId]);

  useEffect(() => {
    fetchComplaints();
    // eslint-disable-next-line
  }, [flats, filterWing]);

  const handleChange = e => setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async e => {
    e.preventDefault();
    setError('');
    setLoading(true);
    try {
      const payload = {
        title: form.title,
        description: form.description,
        category: form.category
      };
      let url = `${API_BASE_URL}/complaints`;
      let method = 'POST';
      const res = await fetch(url, {
        method,
        headers: getAuthHeaders(),
        body: JSON.stringify(payload)
      });
      if (!res.ok) throw new Error('Failed to save complaint');
      setForm({ title: '', description: '', category: CATEGORIES[0] });
      fetchComplaints();
    } catch {
      setError('Failed to save complaint');
    }
    setLoading(false);
  };

  // Admin: mark complaint as resolved
  const handleResolve = async id => {
    setLoading(true);
    try {
      await fetch(`${API_BASE_URL}/complaints/${id}/resolve`, {
        method: 'PUT',
        headers: getAuthHeaders()
      });
      fetchComplaints();
    } catch {
      setError('Failed to resolve complaint');
    }
    setLoading(false);
  };

  return (
    <div>
      <h2 className="text-lg font-semibold mb-4">Complaints</h2>
      {user.role === 'admin' && (
        <div className="flex gap-2 mb-4 items-center">
          <label className="font-medium">Filter by Wing:</label>
          <select value={filterWing} onChange={e => setFilterWing(e.target.value)} className="border rounded px-2 py-1">
            <option value="">All Wings</option>
            {wings.map(w => (
              <option key={w.wingId} value={w.wingId}>{w.name}</option>
            ))}
          </select>
        </div>
      )}
      {user.role === 'resident' && (
        <form onSubmit={handleSubmit} className="flex flex-wrap gap-2 mb-4 items-end">
          <Input name="title" value={form.title} onChange={handleChange} placeholder="Title" required />
          <select name="category" value={form.category} onChange={handleChange} className="border rounded px-2 py-1" required>
            {CATEGORIES.map(cat => (
              <option key={cat} value={cat}>{cat}</option>
            ))}
          </select>
          <Input name="description" value={form.description} onChange={handleChange} placeholder="Description" required />
          <Button type="submit" variant="primary" disabled={loading}>Add</Button>
        </form>
      )}
      {error && <div className="text-red-600 mb-2">{error}</div>}
      <div className="overflow-x-auto">
        <table className="min-w-full border text-sm">
          <thead>
            <tr className="bg-gray-100">
              <th className="px-4 py-2 border">Title</th>
              <th className="px-4 py-2 border">Category</th>
              <th className="px-4 py-2 border">Description</th>
              <th className="px-4 py-2 border">Flat</th>
              <th className="px-4 py-2 border">Status</th>
              <th className="px-4 py-2 border">Actions</th>
            </tr>
          </thead>
          <tbody>
            {complaints.map(complaint => (
              <tr key={complaint.complaintId}>
                <td className="border px-4 py-2">{complaint.title}</td>
                <td className="border px-4 py-2">{complaint.category}</td>
                <td className="border px-4 py-2">{complaint.description}</td>
                <td className="border px-4 py-2">{flats.find(f => f.flatId === complaint.flatId)?.flatNumber || '-'}</td>
                <td className="border px-4 py-2">{complaint.status}</td>
                <td className="border px-4 py-2 space-x-2">
                  {user.role === 'admin' && complaint.status !== 'Resolved' && (
                    <Button type="button" variant="success" onClick={() => handleResolve(complaint.complaintId)} size="sm">Resolve</Button>
                  )}
                </td>
              </tr>
            ))}
            {complaints.length === 0 && (
              <tr><td colSpan={6} className="text-center py-4">No complaints found.</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ComplaintsList;
